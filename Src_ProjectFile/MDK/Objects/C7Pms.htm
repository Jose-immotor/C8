<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\C7Pms.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\C7Pms.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Aug 27 16:54:14 2020
<BR><P>
<H3>Maximum Stack Usage =        904 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Fsm_StatePowerDown &rArr; Mcu_PowerDown &rArr; env_nvds_init &rArr; LogUser_Write &rArr; LogUser_Dump &rArr; LogVal_ToStr &rArr; EventValue_ToStr &rArr; SprintfBit &rArr; braceProc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1f]">ADC0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC0_1_IRQHandler</a><BR>
 <LI><a href="#[112]">Bat_onPlugOut</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10f]">Bat_fsm</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC0_1_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[3b]">ADC2_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[6c]">Bat_event</a> from battery.o(i.Bat_event) referenced 2 times from pms.o(.constdata)
 <LI><a href="#[6a]">Bat_event_readBmsInfo</a> from battery.o(i.Bat_event_readBmsInfo) referenced 2 times from pms.o(.constdata)
 <LI><a href="#[68]">Bat_fsm_init</a> from battery.o(i.Bat_fsm_init) referenced from battery.o(.constdata)
 <LI><a href="#[69]">Bat_fsm_readInfo</a> from battery.o(i.Bat_fsm_readInfo) referenced from battery.o(.constdata)
 <LI><a href="#[7]">BusFault_Handler</a> from gd32f403_it.o(i.BusFault_Handler) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[23]">CAN0_EWMC_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[21]">CAN0_RX0_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[22]">CAN0_RX1_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[20]">CAN0_TX_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[4b]">CAN1_EWMC_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[49]">CAN1_RX0_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[4a]">CAN1_RX1_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[48]">CAN1_TX_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[71]">Ccu_EventIdToStr</a> from cculog.o(i.Ccu_EventIdToStr) referenced from loguser.o(.constdata)
 <LI><a href="#[72]">Ccu_EventValueToStr</a> from cculog.o(i.Ccu_EventValueToStr) referenced from loguser.o(.constdata)
 <LI><a href="#[18]">DMA0_Channel0_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[19]">DMA0_Channel1_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[1a]">DMA0_Channel2_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[1b]">DMA0_Channel3_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[1c]">DMA0_Channel4_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[1d]">DMA0_Channel5_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[1e]">DMA0_Channel6_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[43]">DMA1_Channel0_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[44]">DMA1_Channel1_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[45]">DMA1_Channel2_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[46]">DMA1_Channel3_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[47]">DMA1_Channel4_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[62]">DbgInfo_Event</a> from env_nvds.o(i.DbgInfo_Event) referenced from env_nvds.o(i.env_nvds_init)
 <LI><a href="#[a]">DebugMon_Handler</a> from gd32f403_it.o(i.DebugMon_Handler) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[8f]">Debug_SetB</a> from debug.o(i.Debug_SetB) referenced from debug.o(FSymTab)
 <LI><a href="#[8e]">Debug_SetL</a> from debug.o(i.Debug_SetL) referenced from debug.o(FSymTab)
 <LI><a href="#[90]">Dump</a> from smart_shell.o(i.Dump) referenced from smart_shell.o(FSymTab)
 <LI><a href="#[3c]">EXMC_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[34]">EXTI10_15_IRQHandler</a> from gd32f403_it.o(i.EXTI10_15_IRQHandler) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[24]">EXTI5_9_IRQHandler</a> from gd32f403_it.o(i.EXTI5_9_IRQHandler) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[11]">FMC_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[76]">Fsm_StateFwUpgrade</a> from fsm.o(i.Fsm_StateFwUpgrade) referenced from fsm.o(.constdata)
 <LI><a href="#[73]">Fsm_StateKeyOff</a> from fsm.o(i.Fsm_StateKeyOff) referenced from fsm.o(.constdata)
 <LI><a href="#[74]">Fsm_StateKeyOn</a> from fsm.o(i.Fsm_StateKeyOn) referenced from fsm.o(.constdata)
 <LI><a href="#[75]">Fsm_StatePowerDown</a> from fsm.o(i.Fsm_StatePowerDown) referenced from fsm.o(.constdata)
 <LI><a href="#[5]">HardFault_Handler</a> from cmb_fault.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[2c]">I2C0_ER_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[2b]">I2C0_EV_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[2e]">I2C1_ER_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[2d]">I2C1_EV_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[7a]">IO_Init</a> from driverio.o(i.IO_Init) referenced from driverio.o(.rti_fn.1)
 <LI><a href="#[e]">LVD_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[95]">LogUser_DumpByCount</a> from loguser.o(i.LogUser_DumpByCount) referenced from loguser.o(FSymTab)
 <LI><a href="#[96]">LogUser_DumpByInd</a> from loguser.o(i.LogUser_DumpByInd) referenced from loguser.o(FSymTab)
 <LI><a href="#[58]">Log_VerifyItem</a> from loguser.o(i.Log_VerifyItem) referenced from loguser.o(i.LogUser_Init)
 <LI><a href="#[6]">MemManage_Handler</a> from gd32f403_it.o(i.MemManage_Handler) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from gd32f403_it.o(i.NMI_Handler) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[66]">NfcCardReader_fsm_sleep</a> from nfccardreader.o(i.NfcCardReader_fsm_sleep) referenced from nfccardreader.o(.constdata)
 <LI><a href="#[67]">NfcCardReader_fsm_trans</a> from nfccardreader.o(i.NfcCardReader_fsm_trans) referenced from nfccardreader.o(.constdata)
 <LI><a href="#[59]">Nvc_Done</a> from nvc.o(i.Nvc_Done) referenced from nvc.o(i.Nvc_Init)
 <LI><a href="#[b]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[6b]">Pms_Tx</a> from pms.o(i.Pms_Tx) referenced 2 times from pms.o(.constdata)
 <LI><a href="#[5a]">Pms_cardReaderEventCb</a> from pms.o(i.Pms_cardReaderEventCb) referenced from pms.o(i.Pms_init)
 <LI><a href="#[6d]">Pms_fsm_accOff</a> from pms.o(i.Pms_fsm_accOff) referenced from pms.o(.constdata)
 <LI><a href="#[6e]">Pms_fsm_accOn</a> from pms.o(i.Pms_fsm_accOn) referenced from pms.o(.constdata)
 <LI><a href="#[70]">Pms_fsm_deepSleep</a> from pms.o(i.Pms_fsm_deepSleep) referenced from pms.o(.constdata)
 <LI><a href="#[6f]">Pms_fsm_sleep</a> from pms.o(i.Pms_fsm_sleep) referenced from pms.o(.constdata)
 <LI><a href="#[12]">RCU_CTC_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[35]">RTC_Alarm_IRQHandler</a> from rtc.o(i.RTC_Alarm_IRQHandler) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from rtc.o(i.RTC_IRQHandler) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[94]">Record_LogUser_Dump</a> from loguser.o(i.Record_LogUser_Dump) referenced from loguser.o(FSymTab)
 <LI><a href="#[93]">Reset</a> from smart_shell.o(i.Reset) referenced from smart_shell.o(FSymTab)
 <LI><a href="#[3]">Reset_Handler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[3d]">SDIO_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[2f]">SPI0_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[3e]">SPI2_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from gd32f403_it.o(i.SVC_Handler) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[92]">SelfTest</a> from smart_shell.o(i.SelfTest) referenced from smart_shell.o(FSymTab)
 <LI><a href="#[91]">Set</a> from smart_shell.o(i.Set) referenced from smart_shell.o(FSymTab)
 <LI><a href="#[c]">SysTick_Handler</a> from board.o(i.SysTick_Handler) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[4d]">SystemInit</a> from system_gd32f403.o(i.SystemInit) referenced from startup_gd32f403.o(.text)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[25]">TIMER0_BRK_TIMER8_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[28]">TIMER0_Channel_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[27]">TIMER0_TRG_CMT_TIMER10_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[26]">TIMER0_UP_TIMER9_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[29]">TIMER2_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[2a]">TIMER3_IRQHandler</a> from nvc.o(i.TIMER3_IRQHandler) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[41]">TIMER5_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[42]">TIMER6_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[37]">TIMER7_BRK_TIMER11_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[3a]">TIMER7_Channel_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[39]">TIMER7_TRG_CMT_TIMER13_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[38]">TIMER7_UP_TIMER12_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[3f]">UART3_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[40]">UART4_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[31]">USART0_IRQHandler</a> from gd32f403_it.o(i.USART0_IRQHandler) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[4c]">USBFS_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[36]">USBFS_WKUP_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from gd32f403_it.o(i.UsageFault_Handler) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[d]">WWDGT_IRQHandler</a> from startup_gd32f403.o(.text) referenced from startup_gd32f403.o(RESET)
 <LI><a href="#[97]">__main</a> from __main.o(!!!main) referenced from startup_gd32f403.o(.text)
 <LI><a href="#[56]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[53]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[52]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[54]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[51]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[50]">_snputc</a> from _snputc.o(.text) referenced from vsnprintf.o(.text)
 <LI><a href="#[4f]">_sputc</a> from _sputc.o(.text) referenced 2 times from sprintf.o(.text)
 <LI><a href="#[81]">app_fsm_init</a> from fsm.o(i.app_fsm_init) referenced from fsm.o(.rti_fn.6)
 <LI><a href="#[80]">app_nvc_init</a> from nvc.o(i.app_nvc_init) referenced from nvc.o(.rti_fn.6)
 <LI><a href="#[7f]">app_nvds_init</a> from env_nvds.o(i.app_nvds_init) referenced from env_nvds.o(.rti_fn.6)
 <LI><a href="#[7e]">app_pms_init</a> from pms.o(i.app_pms_init) referenced from pms.o(.rti_fn.6)
 <LI><a href="#[8d]">cmd_free</a> from msh.o(i.cmd_free) referenced from msh.o(FSymTab)
 <LI><a href="#[8c]">cmd_ps</a> from msh.o(i.cmd_ps) referenced from msh.o(FSymTab)
 <LI><a href="#[7c]">env_hardfault_init</a> from cm_backtrace.o(i.env_hardfault_init) referenced from cm_backtrace.o(.rti_fn.5)
 <LI><a href="#[7d]">finsh_system_init</a> from shell.o(i.finsh_system_init) referenced from shell.o(.rti_fn.6)
 <LI><a href="#[63]">finsh_thread_entry</a> from shell.o(i.finsh_thread_entry) referenced from shell.o(i.finsh_system_init)
 <LI><a href="#[79]">gd32_hw_usart_init</a> from drv_usart.o(i.gd32_hw_usart_init) referenced from drv_usart.o(.rti_fn.1)
 <LI><a href="#[84]">hello</a> from cmd.o(i.hello) referenced from cmd.o(FSymTab)
 <LI><a href="#[55]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[8a]">list</a> from cmd.o(i.list) referenced from cmd.o(FSymTab)
 <LI><a href="#[88]">list_mailbox</a> from cmd.o(i.list_mailbox) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[83]">list_mem</a> from mem.o(i.list_mem) referenced from mem.o(FSymTab)
 <LI><a href="#[87]">list_sem</a> from cmd.o(i.list_sem) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[86]">list_thread</a> from cmd.o(i.list_thread) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[89]">list_timer</a> from cmd.o(i.list_timer) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[64]">main_thread_entry</a> from components.o(i.main_thread_entry) referenced from components.o(i.rt_application_init)
 <LI><a href="#[8b]">msh_help</a> from msh.o(i.msh_help) referenced from msh.o(FSymTab)
 <LI><a href="#[57]">nfc_ms_timer_cb</a> from fm175xx.o(i.nfc_ms_timer_cb) referenced from fm175xx.o(i.FM17522_Init)
 <LI><a href="#[5c]">rt_thread_exit</a> from thread.o(i.rt_thread_exit) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[65]">rt_thread_idle_entry</a> from idle.o(i.rt_thread_idle_entry) referenced from idle.o(i.rt_thread_idle_init)
 <LI><a href="#[5d]">rt_thread_timeout</a> from thread.o(i.rt_thread_timeout) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[7b]">rti_board_end</a> from components.o(i.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[78]">rti_board_start</a> from components.o(i.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[82]">rti_end</a> from components.o(i.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[77]">rti_start</a> from components.o(i.rti_start) referenced from components.o(.rti_fn.0)
 <LI><a href="#[5e]">thread_fsm_entry</a> from fsm.o(i.thread_fsm_entry) referenced from fsm.o(i.app_fsm_init)
 <LI><a href="#[5b]">thread_nfc_entry</a> from pms.o(i.thread_nfc_entry) referenced from pms.o(i.Pms_init)
 <LI><a href="#[5f]">thread_nvc_entry</a> from nvc.o(i.thread_nvc_entry) referenced from nvc.o(i.app_nvc_init)
 <LI><a href="#[60]">thread_nvds_entry</a> from env_nvds.o(i.thread_nvds_entry) referenced from env_nvds.o(i.app_nvds_init)
 <LI><a href="#[61]">thread_pms_entry</a> from pms.o(i.thread_pms_entry) referenced from pms.o(i.app_pms_init)
 <LI><a href="#[85]">version</a> from cmd.o(i.version) referenced 2 times from cmd.o(FSymTab)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[97]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[98]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[9a]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2ae]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2af]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2b0]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[2b1]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[2b2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[9b]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[e2]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[9d]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[9f]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[a1]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[a2]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[a3]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[2b3]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[a5]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a7]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a8]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a9]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[ab]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[ad]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[af]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[b0]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[b1]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[b3]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[2b4]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[b5]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[b7]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[b9]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[bb]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[2b5]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[c9]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[bd]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[2b6]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[bf]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[2b7]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[2b8]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[2b9]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2ba]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[c1]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[2bb]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[2bc]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[c2]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[2bd]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[c4]"></a>__rt_lib_init_lc_time_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_time_2 &rArr; _get_lc_time
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time
</UL>

<P><STRONG><a name="[2be]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2bf]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[2c0]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2c1]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2c2]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[2c3]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[2c4]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2c5]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[2c6]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2c7]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[2c8]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2c9]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[ce]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[2ca]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[2cb]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[2cc]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2cd]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[2ce]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[2cf]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[2d0]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[99]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[2d1]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[c6]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c8]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[2d2]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[ca]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2d3]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[108]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[cd]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[2d4]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[cf]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN0_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN1_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER0_BRK_TIMER8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER0_TRG_CMT_TIMER10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER0_UP_TIMER9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER7_BRK_TIMER11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIMER7_TRG_CMT_TIMER13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER7_UP_TIMER12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USBFS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[107]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_gd32f403.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[246]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[247]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[278]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[279]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[283]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmb_fault.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler &rArr; cm_backtrace_fault &rArr; print_call_stack &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintfBit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>

<P><STRONG><a name="[d4]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintfEx
</UL>

<P><STRONG><a name="[d5]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPinToPxx
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ccu_EventValueToStr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ccu_EventIdToStr
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleId_ToStr
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventValue_ToStr
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventId_ToStr
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;braceProc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintfBit
</UL>

<P><STRONG><a name="[d7]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[d8]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[d9]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[da]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d6]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[a6]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[9c]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[dc]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[de]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[aa]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[b2]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[df]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[ac]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[b4]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[9e]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[e0]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[e3]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SetL
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SetB
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUser_DumpByInd
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;braceProc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintfBit
</UL>

<P><STRONG><a name="[e5]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[105]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[1fa]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;braceProc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintfBit
</UL>

<P><STRONG><a name="[1f8]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintfBit
</UL>

<P><STRONG><a name="[180]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_RcvRsp
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_GetNextSendCmd
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_WriteEx
</UL>

<P><STRONG><a name="[11f]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPinToPxx
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaraRom_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ccu_EventIdToStr
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleId_ToStr
</UL>

<P><STRONG><a name="[1fb]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintfBit
</UL>

<P><STRONG><a name="[242]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
</UL>

<P><STRONG><a name="[221]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[187]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_write
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_Send
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_RxData
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_ResetCmds
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_frameBuild
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_RcvRsp
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Write
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_InitSectorMgr
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintfBit
</UL>

<P><STRONG><a name="[e7]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2d5]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalTimeInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GregorianDay
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDateAndTime
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[2d6]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2d8]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgInfo_Event
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_onPlugOut
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[e9]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[2d9]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_hw_usart_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_Init
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTime_GetSeconds
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_onPlugOut
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUser_Dump
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smart_SettingsInit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sif_Init
</UL>

<P><STRONG><a name="[2da]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2db]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[eb]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
</UL>

<P><STRONG><a name="[ed]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTime_FmtStr
</UL>

<P><STRONG><a name="[ef]"></a>mktime</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTime_GetSeconds
</UL>

<P><STRONG><a name="[f3]"></a>strftime</STRONG> (Thumb, 634 bytes, Stack size 72 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = strftime &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_weekbasedyear
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_findweek
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTime_FmtStr
</UL>

<P><STRONG><a name="[2dc]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2dd]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[db]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d3]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>

<P><STRONG><a name="[4f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sprintf.o(.text)
<LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[f6]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[b6]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[b8]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[f7]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[ba]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[bc]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[ae]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[e6]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[e4]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[51]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[dd]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[ee]"></a>_localtime_r</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, localtime_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[2df]"></a>_n$localtime_r</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, localtime_internal.o(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2e1]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[f8]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[55]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[2e2]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[104]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[f9]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[2ad]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[c7]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[103]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[fd]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cc]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d0]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[2e3]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2e4]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2e5]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[10a]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[109]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[10b]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[10c]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[ff]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[100]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[10d]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[cb]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[6c]"></a>Bat_event</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, battery.o(i.Bat_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = Bat_event &rArr; Bat_fsm &rArr; Bat_onPlugOut &rArr;  Bat_fsm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_switchStatus
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_sendCmd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_fsm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pms.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>Bat_event_readBmsInfo</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, battery.o(i.Bat_event_readBmsInfo))
<BR>[Address Reference Count : 1]<UL><LI> pms.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>Bat_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, battery.o(i.Bat_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Bat_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_init
</UL>

<P><STRONG><a name="[117]"></a>Bat_isReadyFroInquery</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, battery.o(i.Bat_isReadyFroInquery))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Bat_isReadyFroInquery &rArr; SwTimer_isTimerOutEx
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwTimer_isTimerOutEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_SwitchPort
</UL>

<P><STRONG><a name="[119]"></a>Bat_msg</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, battery.o(i.Bat_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = Bat_msg &rArr; Bat_fsm &rArr; Bat_onPlugOut &rArr;  Bat_fsm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_fsm
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_plugOut
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_plugIn
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_SwitchPort
</UL>

<P><STRONG><a name="[11a]"></a>Bat_run</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, battery.o(i.Bat_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = Bat_run &rArr; Bat_fsm &rArr; Bat_onPlugOut &rArr;  Bat_fsm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_fsm
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_run
</UL>

<P><STRONG><a name="[11c]"></a>Bat_setDischg</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, battery.o(i.Bat_setDischg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Bat_setDischg &rArr; Bat_sendCmd &rArr; Mod_SendCmd &rArr; Mod_FindCmdItem
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_setDischg
</UL>

<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f403_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>Ccu_EventIdToStr</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, cculog.o(i.Ccu_EventIdToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Ccu_EventIdToStr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_GetLogEventMap
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loguser.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>Ccu_EventValueToStr</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, cculog.o(i.Ccu_EventValueToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Ccu_EventValueToStr &rArr; EventValue_ToStr &rArr; SprintfBit &rArr; braceProc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_GetLogEventMap
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventValue_ToStr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loguser.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>Clear_BitMask</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fm175xx.o(i.Clear_BitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Clear_BitMask &rArr; Write_Reg &rArr; i2c_write_fm17522_reg &rArr; gd32_i2c_write &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_RATS
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rf
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Select
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Request
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Anticollision
</UL>

<P><STRONG><a name="[124]"></a>Clear_FIFO</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm175xx.o(i.Clear_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Clear_FIFO &rArr; Set_BitMask &rArr; Write_Reg &rArr; i2c_write_fm17522_reg &rArr; gd32_i2c_write &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_RATS
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
</UL>

<P><STRONG><a name="[126]"></a>DaraRom_Dump</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, datarom.o(i.DaraRom_Dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = DaraRom_Dump &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaraRom_Init
</UL>

<P><STRONG><a name="[128]"></a>DaraRom_Init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, datarom.o(i.DaraRom_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = DaraRom_Init &rArr; DaraRom_Dump &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaraRom_Dump
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_nvds_init
</UL>

<P><STRONG><a name="[129]"></a>DateTime_FmtStr</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, loguser.o(i.DateTime_FmtStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = DateTime_FmtStr &rArr; strftime &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUser_Dump
</UL>

<P><STRONG><a name="[12a]"></a>DateTime_GetSeconds</STRONG> (Thumb, 52 bytes, Stack size 88 bytes, datatime.o(i.DateTime_GetSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DateTime_GetSeconds &rArr; RTC_GetDateAndTime &rArr; to_tm &rArr; GregorianDay &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDateAndTime
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTime_ToTm
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvds_Write_SysCfg
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Init
</UL>

<P><STRONG><a name="[12c]"></a>DateTime_ToTm</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, datatime.o(i.DateTime_ToTm))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTime_GetSeconds
</UL>

<P><STRONG><a name="[12d]"></a>DateTime_dump</STRONG> (Thumb, 44 bytes, Stack size 56 bytes, datatime.o(i.DateTime_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = DateTime_dump &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDateAndTime
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump
</UL>

<P><STRONG><a name="[62]"></a>DbgInfo_Event</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, env_nvds.o(i.DbgInfo_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DbgInfo_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> env_nvds.o(i.env_nvds_init)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f403_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32f403_it.o(i.EXTI10_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI10_15_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gd32f403_it.o(i.EXTI5_9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI5_9_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[164]"></a>EXTI_GetIRQn</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rcumap.o(i.EXTI_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_PinInit
</UL>

<P><STRONG><a name="[132]"></a>Enter_PowerDown</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, main.o(i.Enter_PowerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Enter_PowerDown &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_to_deepsleepmode
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exti_source_select
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_PowerDown
</UL>

<P><STRONG><a name="[13a]"></a>EventId_ToStr</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, loguser.o(i.EventId_ToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = EventId_ToStr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ModuleDispatch
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUser_Dump
</UL>

<P><STRONG><a name="[120]"></a>EventValue_ToStr</STRONG> (Thumb, 108 bytes, Stack size 280 bytes, loguser.o(i.EventValue_ToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = EventValue_ToStr &rArr; SprintfBit &rArr; braceProc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintfBit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ccu_EventValueToStr
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogVal_ToStr
</UL>

<P><STRONG><a name="[13d]"></a>FM17522_Delayms</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fm175xx.o(i.FM17522_Delayms))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FM17522_Delayms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rf
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_switchPort
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_searchPort
</UL>

<P><STRONG><a name="[13f]"></a>FM17522_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fm175xx.o(i.FM17522_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FM17522_Init &rArr; rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Get
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_init
</UL>

<P><STRONG><a name="[144]"></a>FM175XX_SoftPowerdown</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fm175xx.o(i.FM175XX_SoftPowerdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = FM175XX_SoftPowerdown &rArr; Set_BitMask &rArr; Write_Reg &rArr; i2c_write_fm17522_reg &rArr; gd32_i2c_write &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_switchStatus
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_searchPort
</UL>

<P><STRONG><a name="[145]"></a>FM175XX_SoftReset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm175xx.o(i.FM175XX_SoftReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = FM175XX_SoftReset &rArr; Set_BitMask &rArr; Write_Reg &rArr; i2c_write_fm17522_reg &rArr; gd32_i2c_write &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_searchPort
</UL>

<P><STRONG><a name="[146]"></a>FM175XX_switchPort</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, fm175xx.o(i.FM175XX_switchPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = FM175XX_switchPort &rArr; PortPin_Set &rArr; PortPinToPxx &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin_Set
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM17522_Delayms
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_searchPort
</UL>

<P><STRONG><a name="[240]"></a>Fm17522_get_slave_addr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm175xx.o(i.Fm17522_get_slave_addr))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_fm17522_reg
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_fm17522_fifo
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_fm17522_reg
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_fm17522_fifo
</UL>

<P><STRONG><a name="[148]"></a>Fsm_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsm.o(i.Fsm_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Fsm_Init &rArr; Queue_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAlarmMode
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_PowerDown
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_fsm_entry
</UL>

<P><STRONG><a name="[14b]"></a>Fsm_MsgProc</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, fsm.o(i.Fsm_MsgProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Fsm_MsgProc &rArr; _PrintfLevel &rArr; vsnprintfEx &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_pop
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Read
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintfLevel
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetStop
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_Run
</UL>

<P><STRONG><a name="[150]"></a>Fsm_Run</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsm.o(i.Fsm_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = Fsm_Run &rArr; Fsm_MsgProc &rArr; _PrintfLevel &rArr; vsnprintfEx &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwTimer_isTimerOut
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMsg
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_MsgProc
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_fsm_entry
</UL>

<P><STRONG><a name="[1b1]"></a>Fsm_SetActiveFlag</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fsm.o(i.Fsm_SetActiveFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_Run
</UL>

<P><STRONG><a name="[153]"></a>Fsm_SetState</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, fsm.o(i.Fsm_SetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = Fsm_SetState &rArr; Fsm_TimerStart &rArr; _PrintfLevel &rArr; vsnprintfEx &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwTimer_Stop
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintfLevel
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAlarmMode
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_TimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_Start
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_StateKeyOn
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_StateKeyOff
</UL>

<P><STRONG><a name="[156]"></a>Fsm_Start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsm.o(i.Fsm_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = Fsm_Start &rArr; Fsm_SetState &rArr; Fsm_TimerStart &rArr; _PrintfLevel &rArr; vsnprintfEx &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_SetState
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_PowerDown
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_fsm_entry
</UL>

<P><STRONG><a name="[76]"></a>Fsm_StateFwUpgrade</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fsm.o(i.Fsm_StateFwUpgrade))
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>Fsm_StateKeyOff</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, fsm.o(i.Fsm_StateKeyOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = Fsm_StateKeyOff &rArr; Fsm_SetState &rArr; Fsm_TimerStart &rArr; _PrintfLevel &rArr; vsnprintfEx &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMsg
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_SetState
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_TimerStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>Fsm_StateKeyOn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsm.o(i.Fsm_StateKeyOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = Fsm_StateKeyOn &rArr; Fsm_SetState &rArr; Fsm_TimerStart &rArr; _PrintfLevel &rArr; vsnprintfEx &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_SetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>Fsm_StatePowerDown</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsm.o(i.Fsm_StatePowerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = Fsm_StatePowerDown &rArr; Mcu_PowerDown &rArr; env_nvds_init &rArr; LogUser_Write &rArr; LogUser_Dump &rArr; LogVal_ToStr &rArr; EventValue_ToStr &rArr; SprintfBit &rArr; braceProc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_PowerDown
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_TimerStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.constdata)
</UL>
<P><STRONG><a name="[1ca]"></a>GPIOxToPx</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, driverio.o(i.GPIOxToPx))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPinToPxx
</UL>

<P><STRONG><a name="[13b]"></a>Get_ModuleDispatch</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, loguser.o(i.Get_ModuleDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_ModuleDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleId_ToStr
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogVal_ToStr
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventId_ToStr
</UL>

<P><STRONG><a name="[15c]"></a>GregorianDay</STRONG> (Thumb, 146 bytes, Stack size 72 bytes, date.o(i.GregorianDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GregorianDay &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_tm
</UL>

<P><STRONG><a name="[15d]"></a>I2C_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, drv_i2c.o(i.I2C_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_deinit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clock_config
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack_config
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration_I2C
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_IIC
</UL>

<P><STRONG><a name="[141]"></a>IO_Get</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, driverio.o(i.IO_Get))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin_Set
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM17522_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLed_Init
</UL>

<P><STRONG><a name="[7a]"></a>IO_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, driverio.o(i.IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = IO_Init &rArr; IO_PinInit &rArr; PortPin_Set &rArr; PortPinToPxx &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_PinInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driverio.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[162]"></a>IO_PinInit</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, driverio.o(i.IO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = IO_PinInit &rArr; PortPin_Set &rArr; PortPinToPxx &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exti_source_select
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcu_Get
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetIRQn
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin_Set
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
</UL>

<P><STRONG><a name="[14a]"></a>IsAlarmMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, smart_system.o(i.IsAlarmMode))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_SetState
</UL>

<P><STRONG><a name="[166]"></a>LocalTimeInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rtc.o(i.LocalTimeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LocalTimeInit &rArr; rtc_configuration &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lwoff_wait
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_set
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktimev
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_nvds_init
</UL>

<P><STRONG><a name="[16e]"></a>LogType_ToStr</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, loguser.o(i.LogType_ToStr))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUser_Dump
</UL>

<P><STRONG><a name="[16b]"></a>LogUser_Dump</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, loguser.o(i.LogUser_Dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = LogUser_Dump &rArr; LogVal_ToStr &rArr; EventValue_ToStr &rArr; SprintfBit &rArr; braceProc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogType_ToStr
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTime_FmtStr
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleId_ToStr
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogVal_ToStr
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventId_ToStr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUser_Write
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_DumpByInd
</UL>

<P><STRONG><a name="[171]"></a>LogUser_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, loguser.o(i.LogUser_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = LogUser_Init &rArr; Record_Init &rArr; Record_InitSectorMgr &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_nvds_init
</UL>

<P><STRONG><a name="[175]"></a>LogUser_IsPrintf</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, loguser.o(i.LogUser_IsPrintf))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUser_Write
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_DumpByInd
</UL>

<P><STRONG><a name="[173]"></a>LogUser_Write</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, loguser.o(i.LogUser_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = LogUser_Write &rArr; LogUser_Dump &rArr; LogVal_ToStr &rArr; EventValue_ToStr &rArr; SprintfBit &rArr; braceProc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUser_IsPrintf
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUser_Dump
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Write
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_nvds_init
</UL>

<P><STRONG><a name="[16c]"></a>LogVal_ToStr</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, loguser.o(i.LogVal_ToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = LogVal_ToStr &rArr; EventValue_ToStr &rArr; SprintfBit &rArr; braceProc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ModuleDispatch
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventValue_ToStr
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUser_Dump
</UL>

<P><STRONG><a name="[11e]"></a>Log_GetLogEventMap</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, loguser.o(i.Log_GetLogEventMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Log_GetLogEventMap
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ccu_EventValueToStr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ccu_EventIdToStr
</UL>

<P><STRONG><a name="[174]"></a>Log_Init</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, log.o(i.Log_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Log_Init &rArr; DateTime_GetSeconds &rArr; RTC_GetDateAndTime &rArr; to_tm &rArr; GregorianDay &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTime_GetSeconds
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUser_Write
</UL>

<P><STRONG><a name="[58]"></a>Log_VerifyItem</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, loguser.o(i.Log_VerifyItem))
<BR>[Address Reference Count : 1]<UL><LI> loguser.o(i.LogUser_Init)
</UL>
<P><STRONG><a name="[157]"></a>Mcu_PowerDown</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.Mcu_PowerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = Mcu_PowerDown &rArr; env_nvds_init &rArr; LogUser_Write &rArr; LogUser_Dump &rArr; LogVal_ToStr &rArr; EventValue_ToStr &rArr; SprintfBit &rArr; braceProc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_nvds_init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_Start
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_PowerDown
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_StatePowerDown
</UL>

<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f403_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[17f]"></a>Mod_CalcCrc</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, modbus.o(i.Mod_CalcCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Mod_CalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_FrameVerify
</UL>

<P><STRONG><a name="[17c]"></a>Mod_CheckRxFrame</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, modbus.o(i.Mod_CheckRxFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = Mod_CheckRxFrame &rArr; Mod_RcvFrameHandler &rArr; Mod_RspProc &rArr; Mod_RcvRsp &rArr; Mod_getRspData &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwTimer_isTimerOutEx
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_RcvFrameHandler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_FrameVerify
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_Run
</UL>

<P><STRONG><a name="[18e]"></a>Mod_FindCmdItem</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, modbus.o(i.Mod_FindCmdItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mod_FindCmdItem
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_SendCmd
</UL>

<P><STRONG><a name="[181]"></a>Mod_Init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, modbus.o(i.Mod_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Mod_Init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwTimer_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_init
</UL>

<P><STRONG><a name="[17e]"></a>Mod_RcvFrameHandler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, modbus.o(i.Mod_RcvFrameHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = Mod_RcvFrameHandler &rArr; Mod_RspProc &rArr; Mod_RcvRsp &rArr; Mod_getRspData &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_RspProc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_ReqProc
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_FrameVerify
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_CheckRxFrame
</UL>

<P><STRONG><a name="[114]"></a>Mod_Reset</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, modbus.o(i.Mod_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = Mod_Reset &rArr; Mod_RspProc &rArr; Mod_RcvRsp &rArr; Mod_getRspData &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_ResetCmds
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_RspProc
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_ResetTxBuf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_ResetRxBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_SwitchCfg
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_onPlugOut
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_fsm_readInfo
</UL>

<P><STRONG><a name="[115]"></a>Mod_ResetCmds</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, modbus.o(i.Mod_ResetCmds))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mod_ResetCmds
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_Reset
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_switchStatus
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_onPlugOut
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_fsm_readInfo
</UL>

<P><STRONG><a name="[18a]"></a>Mod_Run</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, modbus.o(i.Mod_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = Mod_Run &rArr; Mod_CheckRxFrame &rArr; Mod_RcvFrameHandler &rArr; Mod_RspProc &rArr; Mod_RcvRsp &rArr; Mod_getRspData &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwTimer_isTimerOut
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwTimer_ReStart
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_CheckRxFrame
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_SendFrame
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_RspProc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_CheckReq
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_run
</UL>

<P><STRONG><a name="[18d]"></a>Mod_RxData</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, modbus.o(i.Mod_RxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mod_RxData
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_Rx
</UL>

<P><STRONG><a name="[11b]"></a>Mod_SendCmd</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, modbus.o(i.Mod_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mod_SendCmd &rArr; Mod_FindCmdItem
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_FindCmdItem
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_sendCmd
</UL>

<P><STRONG><a name="[190]"></a>Mod_SwitchCfg</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, modbus.o(i.Mod_SwitchCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = Mod_SwitchCfg &rArr; Mod_Reset &rArr; Mod_RspProc &rArr; Mod_RcvRsp &rArr; Mod_getRspData &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_SwitchPort
</UL>

<P><STRONG><a name="[1be]"></a>Mod_busErr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, modbus.o(i.Mod_busErr))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_cardReaderEventCb
</UL>

<P><STRONG><a name="[186]"></a>Mod_getRspData</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, modbus.o(i.Mod_getRspData))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = Mod_getRspData &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_RcvRsp
</UL>

<P><STRONG><a name="[113]"></a>Mod_isIdle</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, modbus.o(i.Mod_isIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Mod_isIdle &rArr; Mod_GetNextSendCmd &rArr; SwTimer_isTimerOutEx
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_GetNextSendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_SwitchPort
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_fsm_readInfo
</UL>

<P><STRONG><a name="[16d]"></a>ModuleId_ToStr</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, loguser.o(i.ModuleId_ToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ModuleId_ToStr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ModuleDispatch
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUser_Dump
</UL>

<P><STRONG><a name="[191]"></a>Mx25_EraseSector</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mx25_cmd.o(i.Mx25_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Mx25_EraseSector &rArr; spi_flash_sector_erase &rArr; spi_flash_write_enable &rArr; spi_flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_sector_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Write
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_RemoveAll
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_Erase
</UL>

<P><STRONG><a name="[193]"></a>Mx25_Read</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mx25_cmd.o(i.Mx25_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Mx25_Read &rArr; spi_flash_buffer_read &rArr; spi_flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_buffer_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_Read
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_CalcOffset
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Read
</UL>

<P><STRONG><a name="[195]"></a>Mx25_Write</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mx25_cmd.o(i.Mx25_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Mx25_Write &rArr; spi_flash_buffer_write &rArr; spi_flash_page_write &rArr; spi_flash_write_enable &rArr; spi_flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_buffer_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_WriteEx
</UL>

<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f403_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[197]"></a>NfcCardReader_Send</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nfccardreader.o(i.NfcCardReader_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NfcCardReader_Send &rArr; NfcCardReader_fsm
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_fsm
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_Tx
</UL>

<P><STRONG><a name="[19d]"></a>NfcCardReader_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nfccardreader.o(i.NfcCardReader_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = NfcCardReader_init &rArr; FM17522_Init &rArr; rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM17522_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_init
</UL>

<P><STRONG><a name="[19e]"></a>NfcCardReader_run</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nfccardreader.o(i.NfcCardReader_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NfcCardReader_run &rArr; NfcCardReader_fsm
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_fsm
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_nfc_entry
</UL>

<P><STRONG><a name="[1a3]"></a>NfcCardReader_start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nfccardreader.o(i.NfcCardReader_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = NfcCardReader_start &rArr; NfcCardReader_switchStatus &rArr; FM175XX_SoftPowerdown &rArr; Set_BitMask &rArr; Write_Reg &rArr; i2c_write_fm17522_reg &rArr; gd32_i2c_write &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_switchStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_nfc_entry
</UL>

<P><STRONG><a name="[59]"></a>Nvc_Done</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, nvc.o(i.Nvc_Done))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = Nvc_Done &rArr; Sif_TxByte &rArr; Sif_Tx &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwTimer_Start
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sif_TxByte
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_RemovedItem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvc.o(i.Nvc_Init)
</UL>
<P><STRONG><a name="[1a8]"></a>Nvc_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, nvc.o(i.Nvc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Nvc_Init &rArr; Queue_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwTimer_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sif_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_nvc_entry
</UL>

<P><STRONG><a name="[1ab]"></a>Nvc_IsPwrOn</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nvc.o(i.Nvc_IsPwrOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Nvc_IsPwrOn
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_SendNvcItem
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_Run
</UL>

<P><STRONG><a name="[1a7]"></a>Nvc_RemovedItem</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nvc.o(i.Nvc_RemovedItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Nvc_RemovedItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_reset
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Read
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwTimer_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_Run
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_Done
</UL>

<P><STRONG><a name="[1ae]"></a>Nvc_Run</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, nvc.o(i.Nvc_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = Nvc_Run &rArr; Nvc_SendNvcItem &rArr; Sif_TxByte &rArr; Sif_Tx &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Read
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwTimer_isTimerOut
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sif_TxByte
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_SetActiveFlag
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_SetPower
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_SendNvcItem
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_RemovedItem
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_IsPwrOn
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_nvc_entry
</UL>

<P><STRONG><a name="[1af]"></a>Nvc_SendNvcItem</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nvc.o(i.Nvc_SendNvcItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = Nvc_SendNvcItem &rArr; Sif_TxByte &rArr; Sif_Tx &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sif_TxByte
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_SetPower
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_IsPwrOn
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_Run
</UL>

<P><STRONG><a name="[1b0]"></a>Nvc_SetPower</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, nvc.o(i.Nvc_SetPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = Nvc_SetPower &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_SendNvcItem
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_Run
</UL>

<P><STRONG><a name="[1b3]"></a>Nvds_HwInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, env_nvds.o(i.Nvds_HwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Nvds_HwInit &rArr; spi_flash_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_init
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_nvds_init
</UL>

<P><STRONG><a name="[1b5]"></a>Nvds_InitItem</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, env_nvds.o(i.Nvds_InitItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = Nvds_InitItem &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_nvds_init
</UL>

<P><STRONG><a name="[1f7]"></a>Nvds_SettingDefault</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, env_nvds.o(i.Nvds_SettingDefault))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smart_SettingsInit
</UL>

<P><STRONG><a name="[12f]"></a>Nvds_Write_SysCfg</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, env_nvds.o(i.Nvds_Write_SysCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Nvds_Write_SysCfg &rArr; SectorMgr_Write &rArr; SectorMgr_WriteEx &rArr; Mx25_Write &rArr; spi_flash_buffer_write &rArr; spi_flash_page_write &rArr; spi_flash_write_enable &rArr; spi_flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTime_GetSeconds
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SetL
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SetB
</UL>

<P><STRONG><a name="[19b]"></a>Pcd_Comm</STRONG> (Thumb, 452 bytes, Stack size 40 bytes, fm175xx.o(i.Pcd_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = Pcd_Comm &rArr; Write_FIFO &rArr; i2c_write_fm17522_fifo &rArr; gd32_i2c_write &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_FIFO
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_FIFO
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_RATS
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_fsm_trans
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Select
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Request
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Anticollision
</UL>

<P><STRONG><a name="[251]"></a>Pcd_Comm_timer_cb</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm175xx.o(i.Pcd_Comm_timer_cb))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_ms_timer_cb
</UL>

<P><STRONG><a name="[1a0]"></a>Pcd_ConfigISOType</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, fm175xx.o(i.Pcd_ConfigISOType))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Pcd_ConfigISOType &rArr; Set_BitMask &rArr; Write_Reg &rArr; i2c_write_fm17522_reg &rArr; gd32_i2c_write &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_searchPort
</UL>

<P><STRONG><a name="[19a]"></a>Pcd_SetTimer</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, fm175xx.o(i.Pcd_SetTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Pcd_SetTimer &rArr; Set_BitMask &rArr; Write_Reg &rArr; i2c_write_fm17522_reg &rArr; gd32_i2c_write &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_RATS
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_fsm_trans
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Select
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Request
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Anticollision
</UL>

<P><STRONG><a name="[1bb]"></a>Pms_Rx</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pms.o(i.Pms_Rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Pms_Rx &rArr; Mod_RxData
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_RxData
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_cardReaderEventCb
</UL>

<P><STRONG><a name="[1bc]"></a>Pms_SwitchPort</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, pms.o(i.Pms_SwitchPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = Pms_SwitchPort &rArr; Bat_msg &rArr; Bat_fsm &rArr; Bat_onPlugOut &rArr;  Bat_fsm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_isIdle
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_SwitchCfg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_msg
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_isReadyFroInquery
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_run
</UL>

<P><STRONG><a name="[5a]"></a>Pms_cardReaderEventCb</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, pms.o(i.Pms_cardReaderEventCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Pms_cardReaderEventCb &rArr; Pms_Rx &rArr; Mod_RxData
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_busErr
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_postMsg
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_Rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pms.o(i.Pms_init)
</UL>
<P><STRONG><a name="[1c3]"></a>Pms_init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, pms.o(i.Pms_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Pms_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_init
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_pms_entry
</UL>

<P><STRONG><a name="[1c1]"></a>Pms_plugIn</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pms.o(i.Pms_plugIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = Pms_plugIn &rArr; Bat_msg &rArr; Bat_fsm &rArr; Bat_onPlugOut &rArr;  Bat_fsm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_fsm_accOn
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_fsm_accOff
</UL>

<P><STRONG><a name="[1c2]"></a>Pms_plugOut</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, pms.o(i.Pms_plugOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = Pms_plugOut &rArr; Bat_msg &rArr; Bat_fsm &rArr; Bat_onPlugOut &rArr;  Bat_fsm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_fsm_accOn
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_fsm_accOff
</UL>

<P><STRONG><a name="[1bd]"></a>Pms_postMsg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pms.o(i.Pms_postMsg))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_cardReaderEventCb
</UL>

<P><STRONG><a name="[1c6]"></a>Pms_run</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pms.o(i.Pms_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = Pms_run &rArr; Pms_SwitchPort &rArr; Bat_msg &rArr; Bat_fsm &rArr; Bat_onPlugOut &rArr;  Bat_fsm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_Run
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_SwitchPort
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_run
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_pms_entry
</UL>

<P><STRONG><a name="[1c7]"></a>Pms_setDischg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pms.o(i.Pms_setDischg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Pms_setDischg &rArr; Bat_setDischg &rArr; Bat_sendCmd &rArr; Mod_SendCmd &rArr; Mod_FindCmdItem
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_setDischg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_switchStatus
</UL>

<P><STRONG><a name="[1c8]"></a>Pms_start</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pms.o(i.Pms_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = Pms_start &rArr; Pms_switchStatus &rArr; Pms_findStatusProcFun &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_switchStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_pms_entry
</UL>

<P><STRONG><a name="[1c9]"></a>PortPinToPxx</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, driverio.o(i.PortPinToPxx))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = PortPinToPxx &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOxToPx
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin_Set
</UL>

<P><STRONG><a name="[165]"></a>PortPin_Read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, driverio.o(i.PortPin_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PortPin_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_PinInit
</UL>

<P><STRONG><a name="[147]"></a>PortPin_Set</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, driverio.o(i.PortPin_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = PortPin_Set &rArr; PortPinToPxx &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPinToPxx
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_PinInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_switchPort
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLed_Run
</UL>

<P><STRONG><a name="[152]"></a>PostMsg</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, fsm.o(i.PostMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PostMsg &rArr; Queue_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_write
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_StateKeyOff
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_Run
</UL>

<P><STRONG><a name="[14c]"></a>Queue_Read</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, queue.o(i.Queue_Read))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_MsgProc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_Run
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_RemovedItem
</UL>

<P><STRONG><a name="[1cc]"></a>Queue_getNew</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, queue.o(i.Queue_getNew))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_write
</UL>

<P><STRONG><a name="[149]"></a>Queue_init</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, queue.o(i.Queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Queue_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_hw_usart_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_Init
</UL>

<P><STRONG><a name="[14f]"></a>Queue_pop</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, queue.o(i.Queue_pop))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_getchar
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_MsgProc
</UL>

<P><STRONG><a name="[1ad]"></a>Queue_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, queue.o(i.Queue_reset))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_RemovedItem
</UL>

<P><STRONG><a name="[1cb]"></a>Queue_write</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, queue.o(i.Queue_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Queue_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_getNew
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMsg
</UL>

<P><STRONG><a name="[2aa]"></a>Queue_writeByte</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, queue.o(i.Queue_writeByte))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart0_isr
</UL>

<P><STRONG><a name="[35]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rtc.o(i.RTC_Alarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_Alarm_IRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lwoff_wait
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_get
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_clear
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWakeUpType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[12b]"></a>RTC_GetDateAndTime</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, rtc.o(i.RTC_GetDateAndTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RTC_GetDateAndTime &rArr; to_tm &rArr; GregorianDay &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_get
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_tm
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTime_dump
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTime_GetSeconds
</UL>

<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtc.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_IRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_get
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_clear
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWakeUpType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[133]"></a>RTC_TimerStart</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rtc.o(i.RTC_TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_TimerStart &rArr; rtc_alarm_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_register_sync_wait
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lwoff_wait
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_interrupt_enable
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_get
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_alarm_config
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_PowerDown
</UL>

<P><STRONG><a name="[163]"></a>Rcu_Get</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rcumap.o(i.Rcu_Get))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_PinInit
</UL>

<P><STRONG><a name="[1ba]"></a>Read_FIFO</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fm175xx.o(i.Read_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Read_FIFO &rArr; i2c_read_fm17522_fifo &rArr; gd32_i2c_read &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_fm17522_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
</UL>

<P><STRONG><a name="[122]"></a>Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fm175xx.o(i.Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Read_Reg &rArr; i2c_read_fm17522_reg &rArr; gd32_i2c_read &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_fm17522_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_FIFO
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_BitMask
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rf
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_SoftPowerdown
</UL>

<P><STRONG><a name="[1e2]"></a>Record_CalcWriteSecAddr</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, record.o(i.Record_CalcWriteSecAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Record_CalcWriteSecAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Write
</UL>

<P><STRONG><a name="[1e1]"></a>Record_CalcuReadSecAddr</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, record.o(i.Record_CalcuReadSecAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Record_CalcuReadSecAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Write
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Read
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Init
</UL>

<P><STRONG><a name="[1d9]"></a>Record_Dump</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, record.o(i.Record_Dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Record_Dump &rArr; SectorMgr_Dump &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_Dump
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_LogUser_Dump
</UL>

<P><STRONG><a name="[16f]"></a>Record_DumpByCount</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, record.o(i.Record_DumpByCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = Record_DumpByCount &rArr; Record_DumpByInd &rArr; LogUser_Dump &rArr; LogVal_ToStr &rArr; EventValue_ToStr &rArr; SprintfBit &rArr; braceProc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_DumpByInd
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUser_DumpByCount
</UL>

<P><STRONG><a name="[170]"></a>Record_DumpByInd</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, record.o(i.Record_DumpByInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = Record_DumpByInd &rArr; LogUser_Dump &rArr; LogVal_ToStr &rArr; EventValue_ToStr &rArr; SprintfBit &rArr; braceProc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUser_IsPrintf
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUser_Dump
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_isValid
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Seek
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUser_DumpByInd
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_DumpByCount
</UL>

<P><STRONG><a name="[172]"></a>Record_Init</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, record.o(i.Record_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = Record_Init &rArr; Record_InitSectorMgr &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_isFull
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_RemoveAll
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_InitSectorMgr
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_CalcuReadSecAddr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mx25_EraseSector
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUser_Init
</UL>

<P><STRONG><a name="[1de]"></a>Record_InitSectorMgr</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, record.o(i.Record_InitSectorMgr))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Record_InitSectorMgr &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_Erase
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Init
</UL>

<P><STRONG><a name="[1dc]"></a>Record_Read</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, record.o(i.Record_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Record_Read &rArr; Mx25_Read &rArr; spi_flash_buffer_read &rArr; spi_flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_CalcuReadSecAddr
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mx25_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_DumpByInd
</UL>

<P><STRONG><a name="[1e0]"></a>Record_RemoveAll</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, record.o(i.Record_RemoveAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Record_RemoveAll &rArr; SectorMgr_Init &rArr; SectorMgr_Read &rArr; Mx25_Read &rArr; spi_flash_buffer_read &rArr; spi_flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mx25_EraseSector
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Init
</UL>

<P><STRONG><a name="[1db]"></a>Record_Seek</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, record.o(i.Record_Seek))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_DumpByInd
</UL>

<P><STRONG><a name="[176]"></a>Record_Write</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, record.o(i.Record_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Record_Write &rArr; SectorMgr_Write &rArr; SectorMgr_WriteEx &rArr; Mx25_Write &rArr; spi_flash_buffer_write &rArr; spi_flash_page_write &rArr; spi_flash_write_enable &rArr; spi_flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_CalcuReadSecAddr
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_CalcWriteSecAddr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mx25_EraseSector
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_Write
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUser_Write
</UL>

<P><STRONG><a name="[1dd]"></a>Record_isValid</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, record.o(i.Record_isValid))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_DumpByInd
</UL>

<P><STRONG><a name="[14e]"></a>ResetStop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.ResetStop))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_MsgProc
</UL>

<P><STRONG><a name="[1e3]"></a>Resume_IIC</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, drv_i2c.o(i.Resume_IIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_disable
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_i2c_write
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_i2c_read
</UL>

<P><STRONG><a name="[1e7]"></a>RunLed_GetMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cculed.o(i.RunLed_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLed_Init
</UL>

<P><STRONG><a name="[1e6]"></a>RunLed_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cculed.o(i.RunLed_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RunLed_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Get
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLed_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1e8]"></a>RunLed_Run</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, cculed.o(i.RunLed_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = RunLed_Run &rArr; PortPin_Set &rArr; PortPinToPxx &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin_Set
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwTimer_isTimerOutEx
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1e9]"></a>SIF_ISR_DISABLE</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sif.o(i.SIF_ISR_DISABLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SIF_ISR_DISABLE
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sif_Reset
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sif_Isr
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sif_Init
</UL>

<P><STRONG><a name="[1eb]"></a>SIF_ISR_ENABLE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sif.o(i.SIF_ISR_ENABLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SIF_ISR_ENABLE
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_counter_value_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sif_Tx
</UL>

<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f403_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[1ee]"></a>SectorMgr_CalcOffset</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, sectormgr.o(i.SectorMgr_CalcOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SectorMgr_CalcOffset &rArr; Mx25_Read &rArr; spi_flash_buffer_read &rArr; spi_flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_isDirty
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mx25_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_Init
</UL>

<P><STRONG><a name="[1da]"></a>SectorMgr_Dump</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sectormgr.o(i.SectorMgr_Dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = SectorMgr_Dump &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Dump
</UL>

<P><STRONG><a name="[1b7]"></a>SectorMgr_Erase</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sectormgr.o(i.SectorMgr_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SectorMgr_Erase &rArr; Mx25_EraseSector &rArr; spi_flash_sector_erase &rArr; spi_flash_write_enable &rArr; spi_flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mx25_EraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvds_InitItem
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_WriteEx
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_InitSectorMgr
</UL>

<P><STRONG><a name="[1b6]"></a>SectorMgr_Init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, sectormgr.o(i.SectorMgr_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SectorMgr_Init &rArr; SectorMgr_Read &rArr; Mx25_Read &rArr; spi_flash_buffer_read &rArr; spi_flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_Read
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_CalcOffset
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvds_InitItem
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Write
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_RemoveAll
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_InitSectorMgr
</UL>

<P><STRONG><a name="[1f0]"></a>SectorMgr_Read</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sectormgr.o(i.SectorMgr_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SectorMgr_Read &rArr; Mx25_Read &rArr; spi_flash_buffer_read &rArr; spi_flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mx25_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_WriteEx
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_Init
</UL>

<P><STRONG><a name="[1b8]"></a>SectorMgr_Write</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sectormgr.o(i.SectorMgr_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SectorMgr_Write &rArr; SectorMgr_WriteEx &rArr; Mx25_Write &rArr; spi_flash_buffer_write &rArr; spi_flash_page_write &rArr; spi_flash_write_enable &rArr; spi_flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_WriteEx
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvds_Write_SysCfg
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Write
</UL>

<P><STRONG><a name="[1f1]"></a>SectorMgr_WriteEx</STRONG> (Thumb, 124 bytes, Stack size 144 bytes, sectormgr.o(i.SectorMgr_WriteEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SectorMgr_WriteEx &rArr; Mx25_Write &rArr; spi_flash_buffer_write &rArr; spi_flash_page_write &rArr; spi_flash_write_enable &rArr; spi_flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_Read
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mx25_Write
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_Erase
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_Write
</UL>

<P><STRONG><a name="[1ef]"></a>SectorMgr_isDirty</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sectormgr.o(i.SectorMgr_isDirty))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_CalcOffset
</UL>

<P><STRONG><a name="[1df]"></a>SectorMgr_isFull</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sectormgr.o(i.SectorMgr_isFull))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Init
</UL>

<P><STRONG><a name="[1d0]"></a>SetWakeUpType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.SetWakeUpType))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>Set_BitMask</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fm175xx.o(i.Set_BitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Set_BitMask &rArr; Write_Reg &rArr; i2c_write_fm17522_reg &rArr; gd32_i2c_write &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_FIFO
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_RATS
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rf
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_SetTimer
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_ConfigISOType
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_SoftReset
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_SoftPowerdown
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Select
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Request
</UL>

<P><STRONG><a name="[19f]"></a>Set_Rf</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fm175xx.o(i.Set_Rf))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Set_Rf &rArr; Set_BitMask &rArr; Write_Reg &rArr; i2c_write_fm17522_reg &rArr; gd32_i2c_write &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_BitMask
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM17522_Delayms
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_searchPort
</UL>

<P><STRONG><a name="[1aa]"></a>Sif_Init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sif.o(i.Sif_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sif_Init &rArr; SIF_ISR_DISABLE
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIF_ISR_DISABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_Init
</UL>

<P><STRONG><a name="[1f2]"></a>Sif_Isr</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, sif.o(i.Sif_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sif_Isr &rArr; SIF_ISR_DISABLE
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIF_ISR_DISABLE
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sif_isTimerOut
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>

<P><STRONG><a name="[1f4]"></a>Sif_Reset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sif.o(i.Sif_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sif_Reset &rArr; SIF_ISR_DISABLE
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIF_ISR_DISABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sif_Tx
</UL>

<P><STRONG><a name="[1f5]"></a>Sif_Tx</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sif.o(i.Sif_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = Sif_Tx &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sif_Reset
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIF_ISR_ENABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sif_TxByte
</UL>

<P><STRONG><a name="[1a6]"></a>Sif_TxByte</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sif.o(i.Sif_TxByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = Sif_TxByte &rArr; Sif_Tx &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sif_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_SendNvcItem
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_Run
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_Done
</UL>

<P><STRONG><a name="[1f6]"></a>Smart_SettingsInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, smart_system.o(i.Smart_SettingsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Smart_SettingsInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvds_SettingDefault
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_nvds_init
</UL>

<P><STRONG><a name="[13c]"></a>SprintfBit</STRONG> (Thumb, 678 bytes, Stack size 208 bytes, log.o(i.SprintfBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = SprintfBit &rArr; braceProc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;braceProc
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventValue_ToStr
</UL>

<P><STRONG><a name="[182]"></a>SwTimer_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, swtimer.o(i.SwTimer_Init))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_Init
</UL>

<P><STRONG><a name="[18c]"></a>SwTimer_ReStart</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, swtimer.o(i.SwTimer_ReStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SwTimer_ReStart
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_Run
</UL>

<P><STRONG><a name="[158]"></a>SwTimer_Start</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, swtimer.o(i.SwTimer_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SwTimer_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_SendReq
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_TimerStart
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_Done
</UL>

<P><STRONG><a name="[154]"></a>SwTimer_Stop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, swtimer.o(i.SwTimer_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_RspProc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_SetState
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_RemovedItem
</UL>

<P><STRONG><a name="[151]"></a>SwTimer_isTimerOut</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, swtimer.o(i.SwTimer_isTimerOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SwTimer_isTimerOut &rArr; SwTimer_isTimerOutEx
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwTimer_isTimerOutEx
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_Run
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_Run
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_Run
</UL>

<P><STRONG><a name="[118]"></a>SwTimer_isTimerOutEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, swtimer.o(i.SwTimer_isTimerOutEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SwTimer_isTimerOutEx
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwTimer_isTimerOut
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_fsm_sleep
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_CheckRxFrame
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_GetNextSendCmd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_CheckReq
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLed_Run
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_isReadyFroInquery
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[1fd]"></a>SystemClock_Config</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, board.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemClock_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[4d]"></a>SystemInit</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, system_gd32f403.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_PowerDown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nvc.o(i.TIMER3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER3_IRQHandler &rArr; Sif_Isr &rArr; SIF_ISR_DISABLE
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sif_Isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[202]"></a>TypeA_Anticollision</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, type_a.o(i.TypeA_Anticollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = TypeA_Anticollision &rArr; Pcd_Comm &rArr; Write_FIFO &rArr; i2c_write_fm17522_fifo &rArr; gd32_i2c_write &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_BitMask
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_SetTimer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_CardActivate
</UL>

<P><STRONG><a name="[1a1]"></a>TypeA_CardActivate</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, type_a.o(i.TypeA_CardActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = TypeA_CardActivate &rArr; TypeA_Select &rArr; Pcd_Comm &rArr; Write_FIFO &rArr; i2c_write_fm17522_fifo &rArr; gd32_i2c_write &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Select
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Request
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Anticollision
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_searchPort
</UL>

<P><STRONG><a name="[1a2]"></a>TypeA_RATS</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, type_a.o(i.TypeA_RATS))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = TypeA_RATS &rArr; Pcd_Comm &rArr; Write_FIFO &rArr; i2c_write_fm17522_fifo &rArr; gd32_i2c_write &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_FIFO
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_BitMask
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_SetTimer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_searchPort
</UL>

<P><STRONG><a name="[203]"></a>TypeA_Request</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, type_a.o(i.TypeA_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = TypeA_Request &rArr; Pcd_Comm &rArr; Write_FIFO &rArr; i2c_write_fm17522_fifo &rArr; gd32_i2c_write &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_BitMask
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_SetTimer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_CardActivate
</UL>

<P><STRONG><a name="[204]"></a>TypeA_Select</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, type_a.o(i.TypeA_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = TypeA_Select &rArr; Pcd_Comm &rArr; Write_FIFO &rArr; i2c_write_fm17522_fifo &rArr; gd32_i2c_write &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_BitMask
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_SetTimer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_CardActivate
</UL>

<P><STRONG><a name="[31]"></a>USART0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gd32f403_it.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART0_IRQHandler &rArr; usart0_isr &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart0_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[12e]"></a>Uint32_t_getMaskBit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bit.o(i.Uint32_t_getMaskBit))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SetB
</UL>

<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f403_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f403.o(RESET)
</UL>
<P><STRONG><a name="[1b9]"></a>Write_FIFO</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fm175xx.o(i.Write_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = Write_FIFO &rArr; i2c_write_fm17522_fifo &rArr; gd32_i2c_write &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_fm17522_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
</UL>

<P><STRONG><a name="[123]"></a>Write_Reg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fm175xx.o(i.Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Write_Reg &rArr; i2c_write_fm17522_reg &rArr; gd32_i2c_write &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_fm17522_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitMask
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_BitMask
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_RATS
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_SetTimer
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_ConfigISOType
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_SoftReset
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Select
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Request
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_Anticollision
</UL>

<P><STRONG><a name="[14d]"></a>_PrintfLevel</STRONG> (Thumb, 62 bytes, Stack size 288 bytes, printf.o(i._PrintfLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = _PrintfLevel &rArr; vsnprintfEx &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_puts
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintfEx
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_SetState
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_MsgProc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_TimerStart
</UL>

<P><STRONG><a name="[102]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[277]"></a>__rt_ffs</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, kservice.o(i.__rt_ffs))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[e1]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[209]"></a>_puts</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, drv_usart.o(i._puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _puts &rArr; usart0_put_byte &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart0_put_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintfLevel
</UL>

<P><STRONG><a name="[214]"></a>bkp_deinit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gd32f403_bkp.o(i.bkp_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bkp_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_bkp_reset_enable
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_bkp_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
</UL>

<P><STRONG><a name="[1f9]"></a>braceProc</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, log.o(i.braceProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = braceProc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintfBit
</UL>

<P><STRONG><a name="[217]"></a>cm_backtrace_call_stack</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, cm_backtrace.o(i.cm_backtrace_call_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cm_backtrace_call_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disassembly_ins_is_bl_blx
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
</UL>

<P><STRONG><a name="[d1]"></a>cm_backtrace_fault</STRONG> (Thumb, 414 bytes, Stack size 80 bytes, cm_backtrace.o(i.cm_backtrace_fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = cm_backtrace_fault &rArr; print_call_stack &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_firmware_info
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statck_del_fpu_regs
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_diagnosis
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_stack
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[219]"></a>cm_backtrace_firmware_info</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cm_backtrace.o(i.cm_backtrace_firmware_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = cm_backtrace_firmware_info &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[21e]"></a>cm_backtrace_init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, cm_backtrace.o(i.cm_backtrace_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = cm_backtrace_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_hardfault_init
</UL>

<P><STRONG><a name="[8d]"></a>cmd_free</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, msh.o(i.cmd_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = cmd_free &rArr; list_mem &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[8c]"></a>cmd_ps</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, msh.o(i.cmd_ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = cmd_ps &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[177]"></a>env_nvds_init</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, env_nvds.o(i.env_nvds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = env_nvds_init &rArr; LogUser_Write &rArr; LogUser_Dump &rArr; LogVal_ToStr &rArr; EventValue_ToStr &rArr; SprintfBit &rArr; braceProc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUser_Write
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUser_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalTimeInit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvds_InitItem
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvds_HwInit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaraRom_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smart_SettingsInit
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_PowerDown
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_nvds_entry
</UL>

<P><STRONG><a name="[138]"></a>exti_init</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, gd32f403_exti.o(i.exti_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_PinInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_PowerDown
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
</UL>

<P><STRONG><a name="[131]"></a>exti_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f403_exti.o(i.exti_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_PinInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_PowerDown
</UL>

<P><STRONG><a name="[130]"></a>exti_interrupt_flag_get</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f403_exti.o(i.exti_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
</UL>

<P><STRONG><a name="[21f]"></a>finsh_get_prompt</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, shell.o(i.finsh_get_prompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = finsh_get_prompt &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[228]"></a>finsh_set_prompt_mode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, shell.o(i.finsh_set_prompt_mode))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[224]"></a>finsh_system_function_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(i.finsh_system_function_init))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[7d]"></a>finsh_system_init</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, shell.o(i.finsh_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = finsh_system_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_function_init
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[63]"></a>finsh_thread_entry</STRONG> (Thumb, 936 bytes, Stack size 0 bytes, shell.o(i.finsh_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = finsh_thread_entry &rArr; msh_exec &rArr; _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(i.finsh_system_init)
</UL>
<P><STRONG><a name="[79]"></a>gd32_hw_usart_init</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, drv_usart.o(i.gd32_hw_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gd32_hw_usart_init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[235]"></a>gd32_i2c_read</STRONG> (Thumb, 644 bytes, Stack size 32 bytes, drv_i2c.o(i.gd32_i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = gd32_i2c_read &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop_on_bus
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start_on_bus
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_addressing
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_clear
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_transmit
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_receive
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ackpos_config
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack_config
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_IIC
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_fm17522_reg
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_fm17522_fifo
</UL>

<P><STRONG><a name="[23e]"></a>gd32_i2c_write</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, drv_i2c.o(i.gd32_i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = gd32_i2c_write &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop_on_bus
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start_on_bus
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_addressing
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_clear
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_transmit
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_IIC
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_fm17522_reg
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_fm17522_fifo
</UL>

<P><STRONG><a name="[1b2]"></a>gpio_bit_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f403_gpio.o(i.gpio_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_enable
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_for_write_end
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_sector_erase
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_write
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_buffer_read
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_IIC
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sif_Tx
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sif_Isr
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_SetPower
</UL>

<P><STRONG><a name="[1a9]"></a>gpio_bit_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f403_gpio.o(i.gpio_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_enable
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_for_write_end
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_sector_erase
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_write
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_buffer_read
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_IIC
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sif_Reset
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sif_Isr
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sif_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_SetPower
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_Init
</UL>

<P><STRONG><a name="[137]"></a>gpio_exti_source_select</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, gd32f403_gpio.o(i.gpio_exti_source_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_exti_source_select
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_PinInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_PowerDown
</UL>

<P><STRONG><a name="[135]"></a>gpio_init</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, gd32f403_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_PinInit
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_IIC
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration_I2C
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_hw_usart_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_PowerDown
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_SetPower
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_Init
</UL>

<P><STRONG><a name="[1a5]"></a>gpio_input_bit_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f403_gpio.o(i.gpio_input_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPin_Read
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_IIC
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_Run
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_Done
</UL>

<P><STRONG><a name="[1ac]"></a>gpio_output_bit_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f403_gpio.o(i.gpio_output_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_IsPwrOn
</UL>

<P><STRONG><a name="[84]"></a>hello</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(i.hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = hello &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[161]"></a>i2c_ack_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f403_i2c.o(i.i2c_ack_config))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_i2c_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
</UL>

<P><STRONG><a name="[237]"></a>i2c_ackpos_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f403_i2c.o(i.i2c_ackpos_config))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_i2c_read
</UL>

<P><STRONG><a name="[15f]"></a>i2c_clock_config</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, gd32f403_i2c.o(i.i2c_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
</UL>

<P><STRONG><a name="[23d]"></a>i2c_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f403_i2c.o(i.i2c_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_i2c_read
</UL>

<P><STRONG><a name="[23b]"></a>i2c_data_transmit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f403_i2c.o(i.i2c_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_i2c_write
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_i2c_read
</UL>

<P><STRONG><a name="[15e]"></a>i2c_deinit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gd32f403_i2c.o(i.i2c_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
</UL>

<P><STRONG><a name="[160]"></a>i2c_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f403_i2c.o(i.i2c_enable))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
</UL>

<P><STRONG><a name="[23a]"></a>i2c_flag_clear</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32f403_i2c.o(i.i2c_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_i2c_write
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_i2c_read
</UL>

<P><STRONG><a name="[236]"></a>i2c_flag_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32f403_i2c.o(i.i2c_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_i2c_write
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_i2c_read
</UL>

<P><STRONG><a name="[239]"></a>i2c_master_addressing</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f403_i2c.o(i.i2c_master_addressing))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_i2c_write
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_i2c_read
</UL>

<P><STRONG><a name="[1d7]"></a>i2c_read_fm17522_fifo</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fm175xx.o(i.i2c_read_fm17522_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = i2c_read_fm17522_fifo &rArr; gd32_i2c_read &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_i2c_read
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm17522_get_slave_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
</UL>

<P><STRONG><a name="[1d8]"></a>i2c_read_fm17522_reg</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fm175xx.o(i.i2c_read_fm17522_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = i2c_read_fm17522_reg &rArr; gd32_i2c_read &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_i2c_read
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm17522_get_slave_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Reg
</UL>

<P><STRONG><a name="[238]"></a>i2c_start_on_bus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f403_i2c.o(i.i2c_start_on_bus))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_i2c_write
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_i2c_read
</UL>

<P><STRONG><a name="[23c]"></a>i2c_stop_on_bus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f403_i2c.o(i.i2c_stop_on_bus))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_i2c_write
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_i2c_read
</UL>

<P><STRONG><a name="[206]"></a>i2c_write_fm17522_fifo</STRONG> (Thumb, 72 bytes, Stack size 280 bytes, fm175xx.o(i.i2c_write_fm17522_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = i2c_write_fm17522_fifo &rArr; gd32_i2c_write &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_i2c_write
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm17522_get_slave_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_FIFO
</UL>

<P><STRONG><a name="[207]"></a>i2c_write_fm17522_reg</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fm175xx.o(i.i2c_write_fm17522_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = i2c_write_fm17522_reg &rArr; gd32_i2c_write &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_i2c_write
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fm17522_get_slave_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Reg
</UL>

<P><STRONG><a name="[8a]"></a>list</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cmd.o(i.list))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = list &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[88]"></a>list_mailbox</STRONG> (Thumb, 224 bytes, Stack size 104 bytes, cmd.o(i.list_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[83]"></a>list_mem</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mem.o(i.list_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = list_mem &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem.o(FSymTab)
</UL>
<P><STRONG><a name="[87]"></a>list_sem</STRONG> (Thumb, 216 bytes, Stack size 96 bytes, cmd.o(i.list_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[86]"></a>list_thread</STRONG> (Thumb, 294 bytes, Stack size 224 bytes, cmd.o(i.list_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[89]"></a>list_timer</STRONG> (Thumb, 190 bytes, Stack size 96 bytes, cmd.o(i.list_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = list_timer &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[24c]"></a>$Super$$main</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = $Super$$main &rArr; RunLed_Run &rArr; PortPin_Set &rArr; PortPinToPxx &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLed_Run
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLed_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[64]"></a>main_thread_entry</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, components.o(i.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; RunLed_Run &rArr; PortPin_Set &rArr; PortPinToPxx &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[168]"></a>mktimev</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, date.o(i.mktimev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mktimev
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalTimeInit
</UL>

<P><STRONG><a name="[24e]"></a>msh_auto_complete</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, msh.o(i.msh_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = msh_auto_complete &rArr; msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[22b]"></a>msh_exec</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, msh.o(i.msh_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = msh_exec &rArr; _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[8b]"></a>msh_help</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, msh.o(i.msh_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[220]"></a>msh_is_used</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msh.o(i.msh_is_used))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[136]"></a>nvic_irq_enable</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, gd32f403_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_PinInit
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hwtimer_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_hw_usart_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_PowerDown
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
</UL>

<P><STRONG><a name="[252]"></a>nvic_priority_group_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f403_misc.o(i.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[298]"></a>pmu_backup_write_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f403_pmu.o(i.pmu_backup_write_enable))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
</UL>

<P><STRONG><a name="[139]"></a>pmu_to_deepsleepmode</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gd32f403_pmu.o(i.pmu_to_deepsleepmode))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_PowerDown
</UL>

<P><STRONG><a name="[216]"></a>rcu_bkp_reset_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f403_rcu.o(i.rcu_bkp_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_deinit
</UL>

<P><STRONG><a name="[215]"></a>rcu_bkp_reset_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f403_rcu.o(i.rcu_bkp_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_deinit
</UL>

<P><STRONG><a name="[23f]"></a>rcu_clock_freq_get</STRONG> (Thumb, 378 bytes, Stack size 96 bytes, gd32f403_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clock_config
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hwtimer_init
</UL>

<P><STRONG><a name="[254]"></a>rcu_flag_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f403_rcu.o(i.rcu_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
</UL>

<P><STRONG><a name="[299]"></a>rcu_osci_on</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f403_rcu.o(i.rcu_osci_on))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
</UL>

<P><STRONG><a name="[253]"></a>rcu_osci_stab_wait</STRONG> (Thumb, 342 bytes, Stack size 20 bytes, gd32f403_rcu.o(i.rcu_osci_stab_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
</UL>

<P><STRONG><a name="[1e4]"></a>rcu_periph_clock_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f403_rcu.o(i.rcu_periph_clock_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_IIC
</UL>

<P><STRONG><a name="[134]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f403_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_PinInit
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_init
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hwtimer_init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_IIC
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration_I2C
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_hw_usart_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimerStart
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_PowerDown
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
</UL>

<P><STRONG><a name="[15b]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f403_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_deinit
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration_I2C
</UL>

<P><STRONG><a name="[15a]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f403_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_deinit
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration_I2C
</UL>

<P><STRONG><a name="[29a]"></a>rcu_rtc_clock_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f403_rcu.o(i.rcu_rtc_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
</UL>

<P><STRONG><a name="[255]"></a>rt_application_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, components.o(i.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[225]"></a>rt_calloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mem.o(i.rt_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rt_calloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[25f]"></a>rt_components_board_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[24d]"></a>rt_components_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[257]"></a>rt_enter_critical</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(i.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[258]"></a>rt_exit_critical</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, scheduler.o(i.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[25a]"></a>rt_free</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, mem.o(i.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[25e]"></a>rt_hw_board_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, board.o(i.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = rt_hw_board_init &rArr; rt_system_heap_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[223]"></a>rt_hw_console_getchar</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_usart.o(i.rt_hw_console_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_hw_console_getchar
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
</UL>

<P><STRONG><a name="[261]"></a>rt_hw_console_output</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, kservice.o(i.rt_hw_console_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_hw_console_output &rArr; usart0_put_byte &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart0_put_byte
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[263]"></a>rt_hw_hwtimer_init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, drv_hwtimer.o(i.rt_hw_hwtimer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_hw_hwtimer_init &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update_event_enable
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_nvc_entry
</UL>

<P><STRONG><a name="[140]"></a>rt_hw_i2c_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, drv_i2c.o(i.rt_hw_i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_hw_i2c_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clock_config
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack_config
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM17522_Init
</UL>

<P><STRONG><a name="[210]"></a>rt_hw_stack_init</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, cpuport.o(i.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[1cd]"></a>rt_interrupt_enter</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart0_isr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[1d1]"></a>rt_interrupt_leave</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart0_isr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>rt_kprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, kservice.o(i.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mem
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hello
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_getRspData
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTime_dump
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfTest
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SetL
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SetB
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_firmware_info
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_diagnosis
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_stack
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_PowerDown
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUser_Write
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvds_InitItem
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_nvds_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaraRom_Dump
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pms_init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_findStatusProcFun
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorMgr_Dump
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUser_Dump
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_InitSectorMgr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Dump
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fsm_init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sif_Tx
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_SetPower
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_nvc_init
</UL>

<P><STRONG><a name="[256]"></a>rt_malloc</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, mem.o(i.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[241]"></a>rt_memcpy</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, kservice.o(i.rt_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_fm17522_fifo
</UL>

<P><STRONG><a name="[22a]"></a>rt_memmove</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, kservice.o(i.rt_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[20f]"></a>rt_memset</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, kservice.o(i.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[271]"></a>rt_object_allocate</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, object.o(i.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
</UL>

<P><STRONG><a name="[273]"></a>rt_object_delete</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, object.o(i.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[275]"></a>rt_object_detach</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, object.o(i.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[244]"></a>rt_object_get_information</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, object.o(i.rt_object_get_information))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>

<P><STRONG><a name="[276]"></a>rt_object_init</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, object.o(i.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[287]"></a>rt_object_is_systemobject</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_object_is_systemobject))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[259]"></a>rt_schedule</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, scheduler.o(i.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[27a]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[27b]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[227]"></a>rt_sem_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[25d]"></a>rt_sem_release</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[25b]"></a>rt_sem_take</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[27f]"></a>rt_show_version</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kservice.o(i.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
</UL>

<P><STRONG><a name="[262]"></a>rt_strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kservice.o(i.rt_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[250]"></a>rt_strncpy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, kservice.o(i.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[260]"></a>rt_system_heap_init</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, mem.o(i.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_system_heap_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[280]"></a>rt_system_scheduler_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, scheduler.o(i.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[282]"></a>rt_system_scheduler_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler.o(i.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_system_scheduler_start
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[284]"></a>rt_system_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(i.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[29c]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.rt_system_timer_thread_init))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[226]"></a>rt_thread_create</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, thread.o(i.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[1e5]"></a>rt_thread_delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread.o(i.rt_thread_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_IIC
</UL>

<P><STRONG><a name="[5c]"></a>rt_thread_exit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, thread.o(i.rt_thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_exit &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[289]"></a>rt_thread_idle_excute</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, idle.o(i.rt_thread_idle_excute))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_has_defunct_thread
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[28b]"></a>rt_thread_idle_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, idle.o(i.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1c4]"></a>rt_thread_init</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, thread.o(i.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_nvds_init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pms_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fsm_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_nvc_init
</UL>

<P><STRONG><a name="[13e]"></a>rt_thread_mdelay</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, thread.o(i.rt_thread_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM17522_Delayms
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_nvds_entry
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_pms_entry
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_nfc_entry
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_fsm_entry
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_SendNvcItem
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_nvc_entry
</UL>

<P><STRONG><a name="[26a]"></a>rt_thread_resume</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, thread.o(i.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>

<P><STRONG><a name="[27d]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(i.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[285]"></a>rt_thread_sleep</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, thread.o(i.rt_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>

<P><STRONG><a name="[1c5]"></a>rt_thread_startup</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, thread.o(i.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_startup &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_nvds_init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pms_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fsm_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_nvc_init
</UL>

<P><STRONG><a name="[26c]"></a>rt_thread_suspend</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, thread.o(i.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[5d]"></a>rt_thread_timeout</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, thread.o(i.rt_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[28f]"></a>rt_thread_yield</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, thread.o(i.rt_thread_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_yield &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[28c]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, clock.o(i.rt_tick_from_millisecond))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[11d]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwTimer_isTimerOutEx
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwTimer_Start
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwTimer_ReStart
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_searchPort
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_RxData
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_RspProc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_RcvRsp
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_CheckReq
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunLed_Run
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_switchStatus
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_switchStatus
</UL>

<P><STRONG><a name="[1fc]"></a>rt_tick_increase</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, clock.o(i.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[290]"></a>rt_timer_check</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, timer.o(i.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[27e]"></a>rt_timer_control</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, timer.o(i.rt_timer_control))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[142]"></a>rt_timer_create</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, timer.o(i.rt_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM17522_Init
</UL>

<P><STRONG><a name="[286]"></a>rt_timer_detach</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, timer.o(i.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[211]"></a>rt_timer_init</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, timer.o(i.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[143]"></a>rt_timer_start</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, timer.o(i.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM17522_Init
</UL>

<P><STRONG><a name="[28e]"></a>rt_timer_stop</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, timer.o(i.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[270]"></a>rt_vsnprintf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, kservice.o(i.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[1d5]"></a>rtc_alarm_config</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, gd32f403_rtc.o(i.rtc_alarm_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rtc_alarm_config
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_exit
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimerStart
</UL>

<P><STRONG><a name="[167]"></a>rtc_configuration</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, rtc.o(i.rtc_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rtc_configuration &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_deinit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_backup_write_enable
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_register_sync_wait
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_prescaler_set
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lwoff_wait
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_rtc_clock_config
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_on
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalTimeInit
</UL>

<P><STRONG><a name="[296]"></a>rtc_configuration_mode_enter</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f403_rtc.o(i.rtc_configuration_mode_enter))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_prescaler_set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_set
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_alarm_config
</UL>

<P><STRONG><a name="[297]"></a>rtc_configuration_mode_exit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f403_rtc.o(i.rtc_configuration_mode_exit))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_prescaler_set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_set
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_alarm_config
</UL>

<P><STRONG><a name="[1d2]"></a>rtc_counter_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f403_rtc.o(i.rtc_counter_get))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimerStart
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDateAndTime
</UL>

<P><STRONG><a name="[169]"></a>rtc_counter_set</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, gd32f403_rtc.o(i.rtc_counter_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rtc_counter_set
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_exit
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalTimeInit
</UL>

<P><STRONG><a name="[1cf]"></a>rtc_flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f403_rtc.o(i.rtc_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[1ce]"></a>rtc_flag_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f403_rtc.o(i.rtc_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[1d6]"></a>rtc_interrupt_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f403_rtc.o(i.rtc_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimerStart
</UL>

<P><STRONG><a name="[16a]"></a>rtc_lwoff_wait</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f403_rtc.o(i.rtc_lwoff_wait))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimerStart
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalTimeInit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[29b]"></a>rtc_prescaler_set</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, gd32f403_rtc.o(i.rtc_prescaler_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rtc_prescaler_set
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_exit
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
</UL>

<P><STRONG><a name="[1d4]"></a>rtc_register_sync_wait</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f403_rtc.o(i.rtc_register_sync_wait))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimerStart
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration
</UL>

<P><STRONG><a name="[10e]"></a>rtthread_startup</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, components.o(i.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a0]"></a>spi_crc_polynomial_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f403_spi.o(i.spi_crc_polynomial_set))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_init
</UL>

<P><STRONG><a name="[2a1]"></a>spi_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f403_spi.o(i.spi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_init
</UL>

<P><STRONG><a name="[194]"></a>spi_flash_buffer_read</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, drv_spi.o(i.spi_flash_buffer_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_flash_buffer_read &rArr; spi_flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mx25_Read
</UL>

<P><STRONG><a name="[196]"></a>spi_flash_buffer_write</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, drv_spi.o(i.spi_flash_buffer_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = spi_flash_buffer_write &rArr; spi_flash_page_write &rArr; spi_flash_write_enable &rArr; spi_flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_write
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mx25_Write
</UL>

<P><STRONG><a name="[1b4]"></a>spi_flash_init</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, drv_spi.o(i.spi_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = spi_flash_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_crc_polynomial_set
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvds_HwInit
</UL>

<P><STRONG><a name="[29e]"></a>spi_flash_page_write</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, drv_spi.o(i.spi_flash_page_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_flash_page_write &rArr; spi_flash_write_enable &rArr; spi_flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_enable
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_for_write_end
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_buffer_write
</UL>

<P><STRONG><a name="[192]"></a>spi_flash_sector_erase</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, drv_spi.o(i.spi_flash_sector_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_flash_sector_erase &rArr; spi_flash_write_enable &rArr; spi_flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_enable
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_for_write_end
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mx25_EraseSector
</UL>

<P><STRONG><a name="[29d]"></a>spi_flash_send_byte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, drv_spi.o(i.spi_flash_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_enable
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_for_write_end
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_sector_erase
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_write
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_buffer_read
</UL>

<P><STRONG><a name="[2a3]"></a>spi_flash_wait_for_write_end</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_spi.o(i.spi_flash_wait_for_write_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_flash_wait_for_write_end &rArr; spi_flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_sector_erase
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_write
</UL>

<P><STRONG><a name="[2a2]"></a>spi_flash_write_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_spi.o(i.spi_flash_write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_flash_write_enable &rArr; spi_flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_sector_erase
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_write
</UL>

<P><STRONG><a name="[2a6]"></a>spi_i2s_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f403_spi.o(i.spi_i2s_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_send_byte
</UL>

<P><STRONG><a name="[2a5]"></a>spi_i2s_data_transmit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f403_spi.o(i.spi_i2s_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_send_byte
</UL>

<P><STRONG><a name="[2a4]"></a>spi_i2s_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f403_spi.o(i.spi_i2s_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_send_byte
</UL>

<P><STRONG><a name="[29f]"></a>spi_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gd32f403_spi.o(i.spi_init))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_init
</UL>

<P><STRONG><a name="[5e]"></a>thread_fsm_entry</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsm.o(i.thread_fsm_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = thread_fsm_entry &rArr; Fsm_Start &rArr; Fsm_SetState &rArr; Fsm_TimerStart &rArr; _PrintfLevel &rArr; vsnprintfEx &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_Start
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_Run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(i.app_fsm_init)
</UL>
<P><STRONG><a name="[5b]"></a>thread_nfc_entry</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pms.o(i.thread_nfc_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = thread_nfc_entry &rArr; NfcCardReader_start &rArr; NfcCardReader_switchStatus &rArr; FM175XX_SoftPowerdown &rArr; Set_BitMask &rArr; Write_Reg &rArr; i2c_write_fm17522_reg &rArr; gd32_i2c_write &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_start
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pms.o(i.Pms_init)
</UL>
<P><STRONG><a name="[60]"></a>thread_nvds_entry</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, env_nvds.o(i.thread_nvds_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = thread_nvds_entry &rArr; env_nvds_init &rArr; LogUser_Write &rArr; LogUser_Dump &rArr; LogVal_ToStr &rArr; EventValue_ToStr &rArr; SprintfBit &rArr; braceProc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_nvds_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> env_nvds.o(i.app_nvds_init)
</UL>
<P><STRONG><a name="[61]"></a>thread_pms_entry</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pms.o(i.thread_pms_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = thread_pms_entry &rArr; Pms_run &rArr; Pms_SwitchPort &rArr; Bat_msg &rArr; Bat_fsm &rArr; Bat_onPlugOut &rArr;  Bat_fsm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_start
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_run
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pms.o(i.app_pms_init)
</UL>
<P><STRONG><a name="[266]"></a>timer_auto_reload_shadow_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f403_timer.o(i.timer_auto_reload_shadow_enable))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hwtimer_init
</UL>

<P><STRONG><a name="[1ec]"></a>timer_counter_value_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f403_timer.o(i.timer_counter_value_config))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIF_ISR_ENABLE
</UL>

<P><STRONG><a name="[264]"></a>timer_deinit</STRONG> (Thumb, 322 bytes, Stack size 8 bytes, gd32f403_timer.o(i.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hwtimer_init
</UL>

<P><STRONG><a name="[1ea]"></a>timer_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f403_timer.o(i.timer_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIF_ISR_DISABLE
</UL>

<P><STRONG><a name="[1ed]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f403_timer.o(i.timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIF_ISR_ENABLE
</UL>

<P><STRONG><a name="[265]"></a>timer_init</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, gd32f403_timer.o(i.timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hwtimer_init
</UL>

<P><STRONG><a name="[268]"></a>timer_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f403_timer.o(i.timer_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hwtimer_init
</UL>

<P><STRONG><a name="[201]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f403_timer.o(i.timer_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>

<P><STRONG><a name="[200]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f403_timer.o(i.timer_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>

<P><STRONG><a name="[267]"></a>timer_update_event_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f403_timer.o(i.timer_update_event_enable))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hwtimer_init
</UL>

<P><STRONG><a name="[1d3]"></a>to_tm</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, date.o(i.to_tm))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = to_tm &rArr; GregorianDay &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GregorianDay
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDateAndTime
</UL>

<P><STRONG><a name="[205]"></a>usart0_isr</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, drv_usart.o(i.usart0_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart0_isr &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_writeByte
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[20d]"></a>usart0_put_byte</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drv_usart.o(i.usart0_put_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart0_put_byte &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_puts
</UL>

<P><STRONG><a name="[22d]"></a>usart_baudrate_set</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, gd32f403_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_hw_usart_init
</UL>

<P><STRONG><a name="[2a9]"></a>usart_data_receive</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f403_usart.o(i.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart0_isr
</UL>

<P><STRONG><a name="[2ab]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f403_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart0_put_byte
</UL>

<P><STRONG><a name="[22c]"></a>usart_deinit</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, gd32f403_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_hw_usart_init
</UL>

<P><STRONG><a name="[234]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f403_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_hw_usart_init
</UL>

<P><STRONG><a name="[2ac]"></a>usart_flag_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32f403_usart.o(i.usart_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart0_put_byte
</UL>

<P><STRONG><a name="[233]"></a>usart_interrupt_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f403_usart.o(i.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_hw_usart_init
</UL>

<P><STRONG><a name="[2a8]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gd32f403_usart.o(i.usart_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart0_isr
</UL>

<P><STRONG><a name="[230]"></a>usart_parity_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f403_usart.o(i.usart_parity_config))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_hw_usart_init
</UL>

<P><STRONG><a name="[231]"></a>usart_receive_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f403_usart.o(i.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_hw_usart_init
</UL>

<P><STRONG><a name="[22f]"></a>usart_stop_bit_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f403_usart.o(i.usart_stop_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_hw_usart_init
</UL>

<P><STRONG><a name="[232]"></a>usart_transmit_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f403_usart.o(i.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_hw_usart_init
</UL>

<P><STRONG><a name="[22e]"></a>usart_word_length_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f403_usart.o(i.usart_word_length_set))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32_hw_usart_init
</UL>

<P><STRONG><a name="[85]"></a>version</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.version))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = version &rArr; rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[208]"></a>vsnprintfEx</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, printf.o(i.vsnprintfEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = vsnprintfEx &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintfLevel
</UL>

<P><STRONG><a name="[c5]"></a>_get_lc_time</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_time_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_time
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_time_2
</UL>

<P><STRONG><a name="[56]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[be]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[2e6]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[2e7]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[a0]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[a4]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2a7]"></a>system_clock_168m_irc8m</STRONG> (Thumb, 236 bytes, Stack size 0 bytes, system_gd32f403.o(i.system_clock_168m_irc8m))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[1ff]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32f403.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_168m_irc8m
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[7b]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[78]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[82]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[77]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[28a]"></a>_has_defunct_thread</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, idle.o(i._has_defunct_thread))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[65]"></a>rt_thread_idle_entry</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, idle.o(i.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(i.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[269]"></a>rt_ipc_list_resume</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ipc.o(i.rt_ipc_list_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[26b]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ipc.o(i.rt_ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[26e]"></a>rt_ipc_object_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipc.o(i.rt_ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>

<P><STRONG><a name="[26f]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>

<P><STRONG><a name="[26d]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[27c]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[295]"></a>print_number</STRONG> (Thumb, 400 bytes, Stack size 60 bytes, kservice.o(i.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[294]"></a>skip_atoi</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, kservice.o(i.skip_atoi))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[25c]"></a>plug_holes</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[272]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[274]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[281]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[20e]"></a>_rt_thread_init</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, thread.o(i._rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[288]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[28d]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[212]"></a>_rt_timer_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, timer.o(i._rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[291]"></a>_rt_timer_remove</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, timer.o(i._rt_timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>

<P><STRONG><a name="[213]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>

<P><STRONG><a name="[293]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[292]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[243]"></a>list_find_init</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, cmd.o(i.list_find_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_find_init
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
</UL>

<P><STRONG><a name="[245]"></a>list_get_next</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, cmd.o(i.list_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = list_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
</UL>

<P><STRONG><a name="[248]"></a>object_split</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmd.o(i.object_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
</UL>

<P><STRONG><a name="[249]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmd.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
</UL>

<P><STRONG><a name="[24a]"></a>rt_list_len</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cmd.o(i.rt_list_len))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
</UL>

<P><STRONG><a name="[24b]"></a>show_wait_queue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cmd.o(i.show_wait_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
</UL>

<P><STRONG><a name="[20a]"></a>_msh_exec_cmd</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, msh.o(i._msh_exec_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[20b]"></a>msh_get_cmd</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, msh.o(i.msh_get_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = msh_get_cmd &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[20c]"></a>msh_split</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, msh.o(i.msh_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[24f]"></a>str_common</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, msh.o(i.str_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = str_common
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[222]"></a>finsh_getchar</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, shell.o(i.finsh_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_getchar &rArr; rt_hw_console_getchar
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[229]"></a>shell_auto_complete</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, shell.o(i.shell_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = shell_auto_complete &rArr; msh_auto_complete &rArr; msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[1fe]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, board.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[159]"></a>GPIO_Configuration_I2C</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, drv_i2c.o(i.GPIO_Configuration_I2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPIO_Configuration_I2C &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
</UL>

<P><STRONG><a name="[218]"></a>disassembly_ins_is_bl_blx</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cm_backtrace.o(i.disassembly_ins_is_bl_blx))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
</UL>

<P><STRONG><a name="[21b]"></a>dump_stack</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, cm_backtrace.o(i.dump_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = dump_stack &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[7c]"></a>env_hardfault_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cm_backtrace.o(i.env_hardfault_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = env_hardfault_init &rArr; cm_backtrace_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cm_backtrace.o(.rti_fn.5)
</UL>
<P><STRONG><a name="[21c]"></a>fault_diagnosis</STRONG> (Thumb, 764 bytes, Stack size 8 bytes, cm_backtrace.o(i.fault_diagnosis))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = fault_diagnosis &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[21d]"></a>print_call_stack</STRONG> (Thumb, 118 bytes, Stack size 88 bytes, cm_backtrace.o(i.print_call_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = print_call_stack &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[21a]"></a>statck_del_fpu_regs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cm_backtrace.o(i.statck_del_fpu_regs))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[8f]"></a>Debug_SetB</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, debug.o(i.Debug_SetB))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Debug_SetB &rArr; Nvds_Write_SysCfg &rArr; SectorMgr_Write &rArr; SectorMgr_WriteEx &rArr; Mx25_Write &rArr; spi_flash_buffer_write &rArr; spi_flash_page_write &rArr; spi_flash_write_enable &rArr; spi_flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uint32_t_getMaskBit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvds_Write_SysCfg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug.o(FSymTab)
</UL>
<P><STRONG><a name="[8e]"></a>Debug_SetL</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, debug.o(i.Debug_SetL))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Debug_SetL &rArr; Nvds_Write_SysCfg &rArr; SectorMgr_Write &rArr; SectorMgr_WriteEx &rArr; Mx25_Write &rArr; spi_flash_buffer_write &rArr; spi_flash_page_write &rArr; spi_flash_write_enable &rArr; spi_flash_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvds_Write_SysCfg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug.o(FSymTab)
</UL>
<P><STRONG><a name="[90]"></a>Dump</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, smart_shell.o(i.Dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = Dump &rArr; DateTime_dump &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTime_dump
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smart_shell.o(FSymTab)
</UL>
<P><STRONG><a name="[93]"></a>Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, smart_shell.o(i.Reset))
<BR>[Address Reference Count : 1]<UL><LI> smart_shell.o(FSymTab)
</UL>
<P><STRONG><a name="[92]"></a>SelfTest</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, smart_shell.o(i.SelfTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = SelfTest &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smart_shell.o(FSymTab)
</UL>
<P><STRONG><a name="[91]"></a>Set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, smart_shell.o(i.Set))
<BR>[Address Reference Count : 1]<UL><LI> smart_shell.o(FSymTab)
</UL>
<P><STRONG><a name="[178]"></a>Mod_CheckReq</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, modbus.o(i.Mod_CheckReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Mod_CheckReq &rArr; Mod_SendReq &rArr; Mod_frameBuild
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwTimer_isTimerOutEx
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_SendReq
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_GetNextSendCmd
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_Run
</UL>

<P><STRONG><a name="[17b]"></a>Mod_Event</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, modbus.o(i.Mod_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Mod_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_RspProc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_RcvRsp
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_CheckReq
</UL>

<P><STRONG><a name="[17d]"></a>Mod_FrameVerify</STRONG> (Thumb, 112 bytes, Stack size 28 bytes, modbus.o(i.Mod_FrameVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Mod_FrameVerify &rArr; Mod_CalcCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_CalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_RcvFrameHandler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_CheckRxFrame
</UL>

<P><STRONG><a name="[179]"></a>Mod_GetNextSendCmd</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, modbus.o(i.Mod_GetNextSendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Mod_GetNextSendCmd &rArr; SwTimer_isTimerOutEx
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwTimer_isTimerOutEx
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_isIdle
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_CheckReq
</UL>

<P><STRONG><a name="[185]"></a>Mod_RcvRsp</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, modbus.o(i.Mod_RcvRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Mod_RcvRsp &rArr; Mod_getRspData &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_getRspData
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_Event
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_RspProc
</UL>

<P><STRONG><a name="[184]"></a>Mod_ReqProc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, modbus.o(i.Mod_ReqProc))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_RcvFrameHandler
</UL>

<P><STRONG><a name="[188]"></a>Mod_ResetRxBuf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, modbus.o(i.Mod_ResetRxBuf))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_Reset
</UL>

<P><STRONG><a name="[189]"></a>Mod_ResetTxBuf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, modbus.o(i.Mod_ResetTxBuf))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_Reset
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_SendReq
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_RspProc
</UL>

<P><STRONG><a name="[183]"></a>Mod_RspProc</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, modbus.o(i.Mod_RspProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = Mod_RspProc &rArr; Mod_RcvRsp &rArr; Mod_getRspData &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwTimer_Stop
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_ResetTxBuf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_RcvRsp
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_Run
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_Reset
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_RcvFrameHandler
</UL>

<P><STRONG><a name="[18b]"></a>Mod_SendFrame</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, modbus.o(i.Mod_SendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mod_SendFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_Run
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_SendReq
</UL>

<P><STRONG><a name="[17a]"></a>Mod_SendReq</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, modbus.o(i.Mod_SendReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Mod_SendReq &rArr; Mod_frameBuild
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwTimer_Start
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_frameBuild
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_SendFrame
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_ResetTxBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_CheckReq
</UL>

<P><STRONG><a name="[18f]"></a>Mod_frameBuild</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, modbus.o(i.Mod_frameBuild))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mod_frameBuild
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_SendReq
</UL>

<P><STRONG><a name="[1a4]"></a>NfcCardReader_findStatusProcFun</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nfccardreader.o(i.NfcCardReader_findStatusProcFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NfcCardReader_findStatusProcFun
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_switchStatus
</UL>

<P><STRONG><a name="[198]"></a>NfcCardReader_fsm</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nfccardreader.o(i.NfcCardReader_fsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NfcCardReader_fsm
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_run
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_Send
</UL>

<P><STRONG><a name="[66]"></a>NfcCardReader_fsm_sleep</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, nfccardreader.o(i.NfcCardReader_fsm_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = NfcCardReader_fsm_sleep &rArr; NfcCardReader_searchPort &rArr; TypeA_CardActivate &rArr; TypeA_Select &rArr; Pcd_Comm &rArr; Write_FIFO &rArr; i2c_write_fm17522_fifo &rArr; gd32_i2c_write &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwTimer_isTimerOutEx
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_searchPort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nfccardreader.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>NfcCardReader_fsm_trans</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, nfccardreader.o(i.NfcCardReader_fsm_trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = NfcCardReader_fsm_trans &rArr; NfcCardReader_searchPort &rArr; TypeA_CardActivate &rArr; TypeA_Select &rArr; Pcd_Comm &rArr; Write_FIFO &rArr; i2c_write_fm17522_fifo &rArr; gd32_i2c_write &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_SetTimer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_switchStatus
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_searchPort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nfccardreader.o(.constdata)
</UL>
<P><STRONG><a name="[199]"></a>NfcCardReader_searchPort</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, nfccardreader.o(i.NfcCardReader_searchPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = NfcCardReader_searchPort &rArr; TypeA_CardActivate &rArr; TypeA_Select &rArr; Pcd_Comm &rArr; Write_FIFO &rArr; i2c_write_fm17522_fifo &rArr; gd32_i2c_write &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_RATS
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypeA_CardActivate
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Rf
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_ConfigISOType
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_switchPort
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_SoftReset
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_SoftPowerdown
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM17522_Delayms
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_switchStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_fsm_trans
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_fsm_sleep
</UL>

<P><STRONG><a name="[19c]"></a>NfcCardReader_switchStatus</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nfccardreader.o(i.NfcCardReader_switchStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = NfcCardReader_switchStatus &rArr; FM175XX_SoftPowerdown &rArr; Set_BitMask &rArr; Write_Reg &rArr; i2c_write_fm17522_reg &rArr; gd32_i2c_write &rArr; Resume_IIC &rArr; I2C_init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM175XX_SoftPowerdown
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_findStatusProcFun
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_start
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_searchPort
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_fsm_trans
</UL>

<P><STRONG><a name="[57]"></a>nfc_ms_timer_cb</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, fm175xx.o(i.nfc_ms_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nfc_ms_timer_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcd_Comm_timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm175xx.o(i.FM17522_Init)
</UL>
<P><STRONG><a name="[10f]"></a>Bat_fsm</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, battery.o(i.Bat_fsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = Bat_fsm &rArr; Bat_onPlugOut &rArr;  Bat_fsm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_switchStatus
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_sendCmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_onPlugOut
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_run
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_msg
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_event
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_onPlugOut
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_fsm_readInfo
</UL>

<P><STRONG><a name="[68]"></a>Bat_fsm_init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, battery.o(i.Bat_fsm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Bat_fsm_init &rArr; Bat_switchStatus &rArr; Bat_sendCmd &rArr; Mod_SendCmd &rArr; Mod_FindCmdItem
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_switchStatus
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_sendCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> battery.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>Bat_fsm_readInfo</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, battery.o(i.Bat_fsm_readInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = Bat_fsm_readInfo &rArr; Bat_fsm &rArr; Bat_onPlugOut &rArr;  Bat_fsm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_isIdle
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_ResetCmds
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_Reset
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_switchStatus
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_fsm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> battery.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>Bat_onPlugOut</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, battery.o(i.Bat_onPlugOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + In Cycle
<LI>Call Chain = Bat_onPlugOut &rArr;  Bat_fsm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_ResetCmds
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_Reset
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_fsm
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_fsm
</UL>

<P><STRONG><a name="[111]"></a>Bat_sendCmd</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, battery.o(i.Bat_sendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Bat_sendCmd &rArr; Mod_SendCmd &rArr; Mod_FindCmdItem
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_setDischg
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_event
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_switchStatus
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_fsm_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_fsm
</UL>

<P><STRONG><a name="[110]"></a>Bat_switchStatus</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, battery.o(i.Bat_switchStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Bat_switchStatus &rArr; Bat_sendCmd &rArr; Mod_SendCmd &rArr; Mod_FindCmdItem
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod_ResetCmds
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_event
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_fsm_readInfo
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_fsm_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_fsm
</UL>

<P><STRONG><a name="[6b]"></a>Pms_Tx</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pms.o(i.Pms_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Pms_Tx &rArr; NfcCardReader_Send &rArr; NfcCardReader_fsm
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfcCardReader_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pms.o(.constdata)
</UL>
<P><STRONG><a name="[1bf]"></a>Pms_findStatusProcFun</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pms.o(i.Pms_findStatusProcFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Pms_findStatusProcFun &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_switchStatus
</UL>

<P><STRONG><a name="[6d]"></a>Pms_fsm_accOff</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, pms.o(i.Pms_fsm_accOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = Pms_fsm_accOff &rArr; Pms_plugOut &rArr; Bat_msg &rArr; Bat_fsm &rArr; Bat_onPlugOut &rArr;  Bat_fsm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_plugOut
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_plugIn
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_switchStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pms.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>Pms_fsm_accOn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pms.o(i.Pms_fsm_accOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = Pms_fsm_accOn &rArr; Pms_plugOut &rArr; Bat_msg &rArr; Bat_fsm &rArr; Bat_onPlugOut &rArr;  Bat_fsm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_plugOut
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_plugIn
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_switchStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pms.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>Pms_fsm_deepSleep</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pms.o(i.Pms_fsm_deepSleep))
<BR>[Address Reference Count : 1]<UL><LI> pms.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>Pms_fsm_sleep</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pms.o(i.Pms_fsm_sleep))
<BR>[Address Reference Count : 1]<UL><LI> pms.o(.constdata)
</UL>
<P><STRONG><a name="[1c0]"></a>Pms_switchStatus</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, pms.o(i.Pms_switchStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = Pms_switchStatus &rArr; Pms_findStatusProcFun &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_setDischg
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_findStatusProcFun
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_start
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_fsm_accOn
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pms_fsm_accOff
</UL>

<P><STRONG><a name="[7e]"></a>app_pms_init</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, pms.o(i.app_pms_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = app_pms_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pms.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[7f]"></a>app_nvds_init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, env_nvds.o(i.app_nvds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = app_nvds_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> env_nvds.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[95]"></a>LogUser_DumpByCount</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, loguser.o(i.LogUser_DumpByCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = LogUser_DumpByCount &rArr; Record_DumpByCount &rArr; Record_DumpByInd &rArr; LogUser_Dump &rArr; LogVal_ToStr &rArr; EventValue_ToStr &rArr; SprintfBit &rArr; braceProc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_DumpByCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loguser.o(FSymTab)
</UL>
<P><STRONG><a name="[96]"></a>LogUser_DumpByInd</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, loguser.o(i.LogUser_DumpByInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = LogUser_DumpByInd &rArr; Record_DumpByInd &rArr; LogUser_Dump &rArr; LogVal_ToStr &rArr; EventValue_ToStr &rArr; SprintfBit &rArr; braceProc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_DumpByInd
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loguser.o(FSymTab)
</UL>
<P><STRONG><a name="[94]"></a>Record_LogUser_Dump</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, loguser.o(i.Record_LogUser_Dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = Record_LogUser_Dump &rArr; Record_Dump &rArr; SectorMgr_Dump &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Dump
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loguser.o(FSymTab)
</UL>
<P><STRONG><a name="[80]"></a>app_nvc_init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nvc.o(i.app_nvc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = app_nvc_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvc.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[5f]"></a>thread_nvc_entry</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nvc.o(i.thread_nvc_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = thread_nvc_entry &rArr; Nvc_Run &rArr; Nvc_SendNvcItem &rArr; Sif_TxByte &rArr; Sif_Tx &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hwtimer_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_Run
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nvc_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvc.o(i.app_nvc_init)
</UL>
<P><STRONG><a name="[1f3]"></a>Sif_isTimerOut</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sif.o(i.Sif_isTimerOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sif_isTimerOut
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sif_Isr
</UL>

<P><STRONG><a name="[155]"></a>Fsm_TimerStart</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fsm.o(i.Fsm_TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Fsm_TimerStart &rArr; _PrintfLevel &rArr; vsnprintfEx &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwTimer_Start
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintfLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_StatePowerDown
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_StateKeyOff
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fsm_SetState
</UL>

<P><STRONG><a name="[81]"></a>app_fsm_init</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, fsm.o(i.app_fsm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = app_fsm_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[f0]"></a>_tm_carry</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[f1]"></a>_isoweek</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_yeardays
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_weekbasedyear
</UL>

<P><STRONG><a name="[f5]"></a>_findweek</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strftime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>

<P><STRONG><a name="[f2]"></a>_yeardays</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, strftime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>

<P><STRONG><a name="[f4]"></a>_weekbasedyear</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _weekbasedyear &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>

<P><STRONG><a name="[53]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[fc]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
